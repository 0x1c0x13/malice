// Code generated by go-bindata.
// sources:
// data/bindata.go
// data/config.toml
// data/plugins.toml
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\x6d\x6f\xdb\xc6\xb2\xfe\x2c\xfd\x8a\xad\x80\xf6\x4a\xad\x2a\x8b\x7a\x21\x45\x5f\xe4\x43\x9b\xb4\x40\x2e\x6e\xd3\xa2\xcd\xc1\xf9\x10\x07\xc1\x92\x5c\xda\x44\x68\x52\x87\xa4\x12\x27\x81\xff\xfb\x99\x67\x66\x48\x51\xb2\xec\xb8\x69\x71\x80\x13\x40\x31\xb9\xdc\x9d\x9d\x97\x67\x9e\x99\x15\x75\x76\x66\x9e\x96\x89\x33\x97\xae\x70\x95\x6d\x5c\x62\xa2\x0f\xe6\xb2\xfc\x3e\xca\x8a\xc4\x36\x76\x36\xa4\x09\x75\xb9\xab\x62\x57\x9f\xe3\x1a\x83\x67\x71\x59\xa4\xd9\xe5\xac\x29\xaf\xf3\x6e\x6c\x9b\xef\x2e\xb3\xa2\xee\x06\x9f\xfd\x6a\x5e\xfc\xfa\xd2\xfc\xf4\xec\xf9\xcb\xaf\x86\xc3\xad\x8d\xdf\xda\x4b\xc7\x53\x87\xc3\xec\x7a\x5b\x56\x8d\x19\x0f\x07\xa3\xe8\x43\xe3\xea\x11\x5d\xc4\xe5\xf5\xb6\x72\x75\x7d\x76\xf9\x31\xdb\x62\x20\xbd\x6e\xf0\x27\x2b\xe5\xff\xb3\xac\xdc\x35\x59\x8e\x9b\x92\x17\x6c\x6d\x73\x75\x96\x66\xb9\xc3\x05\x06\xea\xa6\xca\x8a\x4b\x7e\xd6\x64\xd7\x6e\x34\x9c\x0c\x87\xe9\xae\x88\x8d\xda\xf2\xbb\xb3\xc9\x18\x17\xe6\xd5\x6b\x6c\x3b\x35\x85\xbd\x76\x46\x96\x4d\xcc\xb8\x1d\x75\x55\x55\x56\x13\xf3\x69\x38\xb8\xfc\xc8\x77\xe6\xfc\x89\x81\x56\xb3\x17\xee\x3d\x84\xb8\x6a\xcc\x6a\xe3\xfe\xc7\x5d\x9a\xd2\x3d\xc4\x4e\x26\xc3\x41\x96\xf2\x82\xaf\x9e\x98\x22\xcb\x21\x62\x50\xb9\x66\x57\x15\xb8\x9d\x1a\x32\x69\xf6\x13\xa4\xa7\xe3\x11\x04\x99\xaf\xff\x75\x6e\xbe\x7e\x37\x12\x4d\x78\x2f\x92\x71\x3b\x1c\x0e\xde\xd9\xca\x44\xbb\xd4\xc8\x3e\xb2\xc9\x70\xf0\x46\xd4\x79\x62\xb2\x72\xf6\xb4\xdc\x7e\x18\x7f\x43\x73\xa6\xa4\x1b\xad\x8a\xf3\x9f\x5a\x4d\x67\x4f\xf3\xb2\x76\x63\x32\xff\x6f\xd2\x07\x62\x44\xfe\x3d\x82\x68\xa2\xe8\xad\x83\xa4\xd6\xec\x47\xa8\x3e\x9e\x4c\x31\x63\x48\xcf\x9a\x0f\x5b\x67\x6c\x5d\xbb\x06\x2e\xdf\xc5\x0d\xa4\xb0\x7d\x1a\x0f\xda\xa6\x48\x4b\x63\xca\x7a\xf6\x33\x85\xf5\x39\xdd\x74\xeb\x34\x84\xed\x78\x4f\x02\xc7\x90\xfe\x49\x18\x87\x83\x3a\xfb\xc8\xf7\x59\xd1\xf8\xab\xe1\xe0\x1a\xe0\x36\x9d\xd0\x5f\xe8\x96\x07\x5f\x12\x42\x0c\x60\x32\xc3\x15\xf6\x61\xa8\x8c\xd3\xec\x78\xaf\x89\x79\x41\x5b\x8c\x27\xba\x03\xf6\x54\x2b\xd3\x6c\x86\xdd\x69\xf1\xfd\x6b\xff\x20\x75\x68\x2d\x6b\x73\xb8\x14\x8a\x3e\xb8\x14\xba\xd2\xd2\x9e\xe6\x87\x02\x60\xda\xe7\x04\xc0\x38\x92\xd1\x19\x7a\x47\x82\x5a\x7f\xbf\x90\xe7\xf5\xb3\xac\x22\x11\x51\x59\xe6\xfd\xd5\x36\xaf\x3f\x63\xf9\x87\x5a\x0c\x77\x55\x6a\x63\xf7\xe9\xb6\xb7\x5a\x21\x01\x94\xbf\xc1\xaa\xa7\x4c\x28\x2f\x89\x3a\x08\xdc\x82\x86\xf1\xe8\xe2\xc6\x4b\x2f\x6e\x36\xd1\xc5\xcd\x7c\x43\x9f\xb9\x7e\xc2\x8b\x1b\xdf\xd1\xb8\x8e\xa5\x34\xc7\xc6\x17\x37\xeb\xa5\x5c\xaf\x68\xbe\xa3\xeb\x15\xcd\xf1\xf0\x3c\xb9\xb8\x59\xd2\x27\xa0\x67\xf1\xfa\xe2\x26\xa1\xb1\x78\x41\xeb\x03\xfa\x0b\xf9\x1e\x7d\xe8\x79\x48\xeb\xc2\x15\xc9\xb1\xf4\x89\x64\xad\x47\xcf\x52\xfa\x44\x24\xcb\xd2\xdf\x80\xd6\x58\xe8\x10\xc8\xc7\xd1\x67\x03\x7d\x68\xff\x88\x64\x26\xb4\xaf\x4f\x32\x02\xac\xa1\x6b\x8f\xe4\x04\x3e\xed\x1f\x88\x5c\xe8\xe2\x68\xcc\xa7\x7d\x7d\x5f\xe6\x2f\x30\x1e\x88\xce\xd0\x65\x41\xf2\x96\x24\x23\x84\xce\xb8\x86\x3d\xd0\x9d\xee\xa3\x58\xc6\x61\x9b\xa3\xb9\x09\xdd\xa7\x6b\xb1\x63\xed\x64\x1f\x9f\x9e\x6f\x56\xe2\x0b\xec\x35\xc7\x33\xd2\x79\x43\xfb\xf8\xa4\xe3\x1c\xf3\x68\xaf\x80\xfe\x2e\x12\xb1\x67\xb9\x10\xfd\x03\xf5\xab\x75\xe2\x1f\x4b\x6b\x17\x74\x1d\x91\xbc\xcd\x52\xe4\x2e\x48\xa6\x0d\x65\xad\x47\xcf\x62\x5a\x1f\x42\x4f\xf8\x67\x2e\x7a\xce\x49\xa7\xb9\x27\x72\x30\x8e\x3d\xe0\xff\x15\xec\xa2\x67\x7e\x20\xf1\x8a\x68\xaf\x95\x27\x72\x63\x92\xbb\x48\xc5\xa7\x1e\x7d\x92\x54\xe2\x8c\xfd\xfd\xb9\xf8\x67\x49\xf6\x7a\xb4\x66\x0d\xbd\xe9\x7e\x9e\x08\x36\x12\xc4\x0c\xfe\x87\x1c\xd2\xc5\x6e\xc4\x4f\xec\xb3\xa5\xc4\x27\xa5\x39\x4b\x27\xfe\x70\xa1\xc8\xc0\x9c\x88\xf6\xf7\xe8\x59\xb4\x96\xb8\xc0\x87\x11\xdd\x7b\x34\x27\xc0\x7e\xc0\x8a\xea\x0f\xdd\x10\x13\x1b\x88\xaf\xe0\x33\xec\x05\x5d\x60\xc7\x72\x23\x31\x84\x0e\xb0\xd3\xa9\x3e\x88\x55\x80\x3d\x48\xce\x5a\x71\x94\x6e\xe4\x2f\xe4\x86\xc0\x01\x30\x14\xc9\xba\x95\xea\xcc\xfa\xa5\xe2\x1b\x60\x1d\x38\x77\xb1\xd8\xca\x58\x76\xa2\x13\x72\xc2\xd1\xbd\x25\x4c\xb9\xb9\xe8\xbd\x20\x19\x36\x11\x3d\x61\x0b\xe6\x2d\x80\xe7\x95\xec\xb7\xa1\xf1\x30\x95\x38\xfb\xa4\x5b\xbc\x12\x2c\xba\x44\xe4\x62\x0f\xc4\x2b\x4a\x04\xcf\x88\xff\x1a\x36\x6d\xc4\x9e\x65\x2a\xf6\x42\x3f\xd8\x92\xd2\x9a\x24\x12\x1c\x3a\xab\x39\x12\x4b\x1e\xf9\xd0\x0d\xb9\x85\xdc\xd0\x0f\xd6\x27\x0b\xd9\x13\x3e\xc4\xbc\x20\x91\x18\x85\xbe\xe0\x6c\x1d\xa8\xbf\x42\x89\x13\x72\x08\x98\x42\xee\x00\xcb\xc0\x16\xe6\x85\x81\xc8\x83\x0d\xc1\x42\xf2\x1d\x58\x4a\x68\x7c\x45\xf7\x29\xfc\x81\xbf\x73\x89\x55\xea\x8b\x2f\xf0\x0c\xf9\x82\x9c\x05\x8e\x80\x53\xe0\x1f\x73\xc3\x58\x78\x02\xb9\x85\xf9\xf0\x21\xfc\x0f\x3e\x42\xfc\x81\x35\xe4\x9e\x07\xbf\xf8\x9a\x8b\x0b\xf1\x3f\x70\x09\x1c\x2d\xe6\x32\x06\x9f\xaf\x43\xe1\xb3\x39\x70\xee\x8b\x8d\xd6\x0a\x07\x40\x3e\xe2\x04\x9f\x79\x6b\x89\x25\x72\x92\xb1\xb4\x16\xec\xac\x14\xbb\xf8\x6c\x14\x1b\xd0\x61\xe3\x8b\x4e\xe0\xac\x15\x7c\xbe\x10\xff\x2e\xd4\xcf\xf0\x1b\x6c\x08\xd4\x57\xc0\x58\xa2\x39\x85\x58\xe1\x1e\x58\x58\x86\xb2\x0f\xe7\x5f\x28\x73\x91\x87\xc0\x25\xfc\x04\x5e\x85\x2e\x4e\xb1\x1b\x6b\xfe\x2f\xd6\xe2\x2b\xc4\xde\xd2\x3c\x2f\x16\x4c\x00\x5b\x18\x47\x0c\x57\xb1\x7c\x90\x73\x31\x6c\x01\x3e\x7c\xe1\x33\xc8\x0d\x36\x82\x77\xc6\x29\xd6\xc1\x67\xd0\x35\x94\xb9\xb0\xd1\xaa\x5f\x58\xce\x4a\x74\x81\xff\xe2\x36\x26\x4b\xe1\x08\xc8\x8c\x37\x32\x06\xec\x7a\xea\xe3\x24\x91\x78\x72\xbe\xcf\x65\x7d\xec\x89\xde\x81\xe6\x10\xcb\xf6\x85\x73\xfd\x48\xe6\x3a\x5f\x62\x06\xae\x82\x6e\xc8\x69\xc4\x2e\x56\xfe\x04\x77\x41\x1e\x6a\x07\xfc\x0f\xbf\xe1\xc3\x7c\x69\x85\x3f\x12\x4f\xe2\x16\x2b\x57\x24\xa1\xcc\x75\xca\x41\x9c\x73\x24\x63\xe5\x0b\xbe\xd3\xa5\x70\x00\x78\x08\x18\xdf\x90\xae\x1b\xf0\x21\xb8\x2f\x96\x78\x42\x06\xe4\xa2\x76\xc0\xaf\xa8\x51\xb8\x66\x9c\x24\x82\xcd\x40\x31\x03\xdd\x6c\x24\xf8\x5b\xce\x65\x3f\xf0\xd5\x22\x90\x1a\x01\x7b\x90\xbf\xc0\x28\xf8\x32\xd5\x3c\x04\xd7\x38\xc4\x3e\x14\x3e\x58\x2b\x1f\xc0\x9f\x4b\x5f\x74\xf0\x7c\x91\x81\xbd\x90\xbf\x88\x25\x7c\x85\xf8\x23\xaf\xc0\xab\x88\x39\xe3\x1e\xfe\xf6\x25\x8e\xe0\x28\xe4\x35\x72\x16\xb1\x8f\xe1\xf7\xb5\xe0\x0a\x7e\x8a\x7c\xf5\x9b\x2f\xb5\x20\xdc\x08\x2e\x50\x53\xe7\x2b\xb1\x13\xf7\x88\x03\x74\x01\x2f\x01\xaf\x98\x3f\x6f\xfd\xe6\x0b\x47\x83\xaf\xe0\x3b\xf8\x08\xb8\x00\xe7\x80\x4b\xe2\xa5\xd4\x75\xae\x47\xa9\xf8\x01\xbe\x82\x8f\x6c\xcb\x43\xbe\xf0\x68\xda\xf6\x1e\xb1\x70\x19\xae\x51\x8f\xc0\x33\xab\x44\xb8\x3d\xd0\x38\x04\xf0\xc7\x5a\x7c\x87\x7c\xc6\x1e\x9c\x67\x5a\x6f\xb0\x1f\xe3\x0f\x78\x77\x82\x3f\xd4\x35\x60\x06\x3c\x86\xda\xd9\xf6\x3b\xa8\xe3\xa9\xd6\x7f\xd4\x2d\x4f\xeb\x33\xf4\x85\x1f\x64\xde\xa8\x3d\xeb\x1c\x76\x53\xda\x83\x9f\x3a\xdb\xb4\x9d\x7a\xef\x6c\x44\x4d\xfd\x51\x37\x36\xa5\xa1\xd1\xf1\x91\x6f\x44\xa3\x93\xae\x63\x3e\x5c\x80\xbd\xbe\xe5\x26\xbf\xbf\x17\x77\xf9\xdd\x51\xea\xa4\x8a\x9f\x3b\xaa\x74\x27\x0c\x3e\x23\x90\x94\xa3\x7e\xf3\x13\x3a\xf1\x73\x73\x42\x59\x83\x46\xfb\xdc\x78\x9e\x17\x4e\x0d\x7a\xe6\xf3\x7e\x4b\x3d\x5e\x2d\xe6\x13\x1e\x47\x27\x7c\x2e\x9d\xf2\x3f\x8a\xec\x66\xec\xad\xd6\x8b\x65\xe8\x87\xab\xf5\xd4\xcc\x27\x74\x08\xb2\xd8\xf6\x1b\x36\xee\x13\x5b\x74\x6e\xd4\x30\xe8\x74\xce\xff\xdf\x76\x8e\xb5\xd3\x3b\x5d\xee\x6f\x72\x44\xfe\x4b\x6d\x2e\x4a\xf7\x4a\x5b\x48\x94\x9e\x65\x4b\x67\x81\xd0\x13\x68\x13\x2d\x24\xa8\x04\xf0\x42\x2b\xc6\x25\x58\x53\x93\xcb\xdb\x52\xca\xfe\x02\xb4\x1b\x0a\x3c\x71\x0d\x2a\x63\x8a\x59\x4a\x29\xb0\x5a\x12\x90\x7a\xc9\x46\xa8\x01\x6d\x32\xda\x62\xa4\x3b\xe4\xa3\x74\x81\x32\x41\x8b\xa0\xd2\xa5\xb6\xde\x48\x7b\xa6\x2d\x5f\xca\xc2\x42\xdb\x16\xcc\x47\xaa\x30\x85\x06\x32\x3f\xd5\xd6\x1d\xba\xa0\xa4\xf8\x4b\xd9\x33\x0d\x65\x2e\x7c\x83\xf2\xea\x6b\xeb\x0a\x8a\x47\x4b\xcb\xed\xa2\x27\xd4\x0e\xbd\x22\xf5\x01\xc6\xe0\x2b\x94\x22\xf8\x16\xa5\x0e\x32\xd7\x7a\x1c\x00\xbd\x2c\xb5\x75\x05\x65\x80\xaa\x40\x37\x9e\x96\x08\x94\x2c\x5f\xe9\x1c\x2d\xb0\xef\x49\x8b\x84\x76\x06\x25\x17\x25\x0f\xa5\x1d\x14\x8a\xd4\xc7\x11\xc0\x69\xdb\x81\x14\x85\x3d\xed\x7c\x94\x11\xb4\x13\xeb\x96\xba\x13\x69\x69\x43\xa5\x4d\xd0\x22\x7c\x0e\x3a\x44\x3a\xc7\x5a\x36\xd6\xda\xb2\x40\x77\xd0\x34\xda\x09\xf8\x01\xad\x36\x28\x18\x25\x0a\xba\xa1\x04\xe2\x88\x02\xdf\xc1\x26\x50\x26\x5a\x81\x45\x4b\x45\xa9\x94\x11\xd0\x1d\x68\x11\x63\x7e\x5b\xce\x12\xd1\x1b\x6d\x00\x63\xcc\x69\x1b\x95\x8a\x4d\xc0\x0b\xb7\x28\x91\x7c\xa0\x0b\x64\x41\x77\xf8\x1c\x9f\xb5\xb6\xfb\x68\x7b\x50\xc2\x50\xee\x60\x0b\xb0\x14\x7a\x82\x55\xe8\x84\x96\xc5\x29\x6d\xcf\xf5\xa8\xc2\xf4\xbc\x92\x58\xa3\x4c\xe3\xd8\xb3\xd1\x92\xc0\x98\x09\x05\x83\x88\x97\xaf\x25\x94\x4b\xae\x93\x96\x18\x14\x0b\x5f\xa0\x3d\x47\xfb\xe2\x6b\x1b\x66\xb5\x1c\xa3\x7c\x01\x2f\x56\x29\x1c\xb1\x43\xce\x70\x09\x56\x3b\xe0\x7b\xe0\x14\x7e\x85\x8f\x80\x97\x40\xe9\x19\x2d\x13\xe2\x01\x7d\xd1\x5a\x30\xed\x6e\xa4\xec\xa1\xfd\x8c\xb4\x45\x42\xcc\x19\xfb\x2b\xbd\x5e\x0b\xde\xe1\x4b\xab\x2d\xb2\xa7\xc7\xbf\xf9\x52\x4a\x31\xec\x41\x89\x47\x5b\x03\x9b\x56\xa9\xf8\x09\xed\x2b\xf4\x0e\x9d\xb6\xa8\x91\x94\x5f\xe8\xbd\xd1\x92\x11\x68\x99\x04\xce\xc0\x13\x7c\xac\x5c\x49\xa9\x0a\x94\x1b\xe6\x7a\x64\x85\x1e\x68\xbf\x61\x3b\x5a\xc3\x54\xcb\x06\xfc\x07\x1b\x60\x37\xfc\xc7\x47\x96\x54\x7c\x00\xdc\xa3\x35\xe2\x96\xc6\x13\xdc\x71\x6b\xb1\x94\x7c\x84\x9f\x19\xef\x2d\x16\x43\x91\x89\x72\x0e\x7e\x41\x1e\xe0\xe8\x90\xea\x31\x8c\x5b\x91\x8d\xe8\xb1\xd2\x76\xb8\x9d\x0b\xcc\xa1\x1d\x80\x4f\x19\xcb\x4e\x8e\xcc\x68\x61\xc0\x43\x68\xed\xc1\x03\xc0\x8a\xaf\xf7\xb8\x06\xb6\x50\x7e\x11\x5b\x2e\x99\xda\x6a\x05\x9a\x43\xe0\x2d\xe0\x11\x6d\x01\x1f\x9b\x7c\x3d\x26\xc4\xf2\x37\x54\xbf\xf3\xd1\xdf\x13\xdb\x51\xe2\xe1\x7f\xf0\x1b\xca\x36\xb0\x03\x7c\x20\xcf\x96\x56\x62\x81\xdc\xe5\xaf\x19\xd6\x72\xbc\xe0\x63\x90\xc6\x1a\x7e\x43\x9b\x06\x6c\xf1\x11\x44\xf9\x8f\x8f\x01\x1b\xe1\x66\xd8\xc5\xed\x61\xaa\x2d\xab\x15\xbe\xe9\x78\xbf\x57\xf2\xa1\x1f\xec\x02\xb7\x61\x2d\xda\x9c\x7b\x4a\x7e\xaf\xb4\x7c\x59\xcd\xef\x09\xd8\x17\xfd\xfe\x77\xba\x77\xab\x7e\x6f\xc9\x63\xcb\xfe\x5d\x35\xff\xd6\xba\x7f\xa8\x6f\x5b\xf8\xe7\xc1\xe6\x4f\x17\xfe\x60\xbd\x9e\xff\xe5\xc2\x7f\x76\x66\x7e\xe0\xef\x3b\xf3\xd2\x26\xb5\xb1\x45\x62\x64\x4e\x6d\x9a\xab\xf6\xbb\xd0\xb4\xac\xf8\xee\x32\x7b\xe7\x0a\xfe\xde\x95\xbf\x73\x7f\xde\x74\x73\x6d\x21\x3e\x35\xe4\xa9\xfd\xba\xb8\xdc\xe5\x89\x29\xca\xc6\x44\x8e\x84\xec\x48\x78\x59\x61\xe5\xc1\x03\xec\xec\x92\x99\x04\x8d\x95\x19\x7f\xee\x4b\xef\xd8\x16\x45\x59\x64\xb1\xcd\xf1\xbd\x27\x4c\xd7\x2f\xd6\x67\xbf\xbb\x6d\x6e\x63\x37\x96\x2f\x87\x47\x17\x17\xe4\xe3\xd1\x19\xfd\xf7\xbd\x27\x71\x4c\xa7\xa6\x7c\x8b\x15\x6f\x34\x4a\xaf\x0e\x85\xbd\xfe\x5f\x3c\x47\x88\x6d\x07\x8b\x14\x18\x38\x01\x82\x7b\xbf\xa8\x16\x97\x7e\x5d\x1b\x92\xfd\x3f\xf0\x92\xe5\x77\x16\x6c\xc0\x89\x6f\xaf\xf1\xf5\x75\x17\x9a\x99\xc6\x0d\x01\x1a\xdc\x0e\x3f\xbf\x07\xdc\xc8\xce\x55\xa9\x13\x8d\xeb\x2f\xbb\xba\x91\x49\x59\x6d\xf2\xec\xad\xd3\x48\x47\xbb\xc6\x6c\x2d\x19\x5c\x9b\xf7\x57\x14\x4f\x19\x7d\xcf\x21\x69\x95\xd0\x70\xb6\x61\xae\xb3\xeb\x6d\x9e\xa5\x99\xab\x4d\x6d\x53\x47\x68\xca\x9a\xcc\xe6\xd9\x47\xdb\x64\x65\x61\xca\xd4\x5c\xe6\x65\x64\x73\x43\x7d\x64\x66\xa3\xdc\xd5\x1a\xce\x4e\x87\xc3\x90\x4a\x44\xe1\xc3\xbd\x93\xf7\xd3\x4e\x26\x1c\x6b\x3c\x1e\x31\xb0\xce\x75\xf2\xc8\x7c\x27\xef\x47\xbe\x33\xa3\x09\x25\x18\xfd\xa5\x55\xe2\xa1\xf1\x64\x72\xf0\x75\xbf\xed\xa3\x9d\xbf\x9f\x7f\x08\xf1\x9c\xc9\xff\x69\xd8\x43\xab\x23\xe8\xf7\xde\x33\xfc\xd7\xe1\x9f\x9d\xfc\x85\x39\x90\xb1\xc1\x8f\x4a\x81\x76\x9b\xfb\xd2\x80\x27\xc1\xb2\xfa\x20\xce\x05\x8f\x94\xbd\xb8\xd5\xfd\x58\xf0\x82\x31\x90\xba\x7f\xa5\x22\x4b\xc8\x1f\xd7\xf6\xad\x1b\xb7\x4f\x88\x80\xa7\x26\x77\xc5\xb8\x75\x28\x80\x07\xe8\x14\x1a\x9a\xca\x16\x97\xae\x73\x37\x3b\x4e\x24\x3d\x31\x76\xbb\x75\x45\xc2\xc1\xaa\x5b\xad\xfb\x06\x63\x5c\xcd\xe8\xd6\x53\x32\x5b\xd3\x20\xc9\xa6\xe6\xaa\xcc\x13\x28\xe7\x6c\x7c\xa5\xe0\xd3\x97\xa4\x65\x45\x75\x03\xe2\x13\xd3\x94\x26\x6b\x6a\xc5\x2f\x1f\xf4\x5a\x51\xb0\x64\xfb\x4a\xcc\x78\x0d\xdb\xef\xd6\x48\xd2\xf6\xee\x79\xf5\xdc\xdc\x39\x82\x9f\x28\x6e\xe7\xc7\xe5\x74\xda\x8f\xc8\xb3\xac\x3a\x88\x07\xde\x92\x6a\x50\x22\x97\x97\xef\xc9\xc8\xd8\x55\x8d\xcd\x0a\x7e\x7d\x9b\x55\x2e\x26\xa3\x08\x3f\xd7\x91\x4b\x28\x71\x28\x45\xf7\xeb\xee\xbe\x0f\xfe\x99\x02\xe0\x6e\x2c\xd1\x96\x43\x72\x7e\x28\x77\xa6\xda\x15\xbd\x59\x86\x78\x8b\x75\x9e\xcd\x66\x4c\x02\x3c\x48\x56\x62\x4b\x56\x09\x62\xd2\x32\x27\x5d\xe0\xe2\xab\x8c\xdc\x5a\xc5\x57\x1f\xf8\x15\x33\xfe\xf1\xea\xf6\xc6\xd0\xd4\x72\xd6\xdc\x34\xfb\x81\xec\xfa\xb2\xf7\xd8\x10\xaa\xb7\xc5\x65\x7f\x20\x6a\x07\x9a\x8e\x86\xf1\x1e\x8b\x5d\x39\x9a\x1c\x32\x72\x8b\xb6\x4f\x23\xdd\x07\x79\x4d\x3b\x8c\x6e\xfb\x1e\x95\xb5\x67\x18\xbf\x77\x3d\xab\x81\xd5\xbc\xfd\xf1\xfa\x56\xfa\x84\x7d\xb2\x1f\xa7\xec\x72\x37\x59\xdd\x1c\xcb\x6d\x19\xf0\x50\x0a\x66\x65\x79\x7e\x77\x73\x36\xed\xb6\x9f\x68\x98\x7f\x5c\xee\xdb\xc4\xda\x13\x5e\x81\x37\x8b\x4a\x5a\x4d\xe5\x1c\x53\x19\x92\x8e\x73\x06\x9c\x34\xe7\xc4\xfa\x52\x62\x1c\xe0\x05\xfd\xff\x93\x7d\xfd\x25\x7f\x50\xcd\x6b\xc6\x87\x22\x79\x11\x16\x20\xc3\xdf\x4c\xcd\x76\x9f\xe1\x9d\x08\xa6\x46\xd6\x98\xa8\x92\xfe\xcc\x9e\x5e\x65\x79\x52\xb9\xe2\xd5\xf6\x35\x1e\x91\xea\xf2\xb4\xc7\xa4\x5f\x52\xe6\x07\x42\x9a\xb7\xed\xeb\x6f\xde\xeb\x67\x78\xf6\x11\xef\xd2\x1f\x92\x0b\x06\x7a\x77\x3f\xd1\x1d\xd8\xd4\xb2\x5d\x8c\xfb\x17\x07\x94\x77\x30\x4f\x94\x79\xb7\x27\xbd\xea\xdd\x74\xbf\xe8\x80\xf6\xf0\xa4\xff\x42\x5e\x63\xde\x7b\xa1\xce\x46\x72\xd2\x9d\x24\xad\xe1\xa0\xdb\xb5\x47\x70\xdf\xb6\xd8\xb9\xed\x58\x90\xc5\x52\xdf\xac\x97\x9f\xd8\x4b\x27\x96\xb4\x2c\x48\x9c\xf6\x98\xb9\xf8\xa5\x48\x9f\x2d\xbb\x35\x47\xb4\x79\x72\xf9\xed\x2d\x1f\x6e\x8e\xa8\xf4\x40\x44\x9f\x53\xef\x97\x81\xff\x6e\x85\x71\x7f\x77\x35\x91\xa7\x93\x98\x57\x72\xc3\xdd\x8b\xd4\x0c\x0a\xbe\xeb\xb7\x3a\x1d\xdb\x4a\x9e\xf6\x57\x8f\xe9\xd9\xd1\x8f\x52\xa4\x03\x22\xb3\xa1\xda\x63\xdb\x39\x0d\xb5\x1e\x9d\x06\x59\xdb\xe0\x74\x4b\xbb\x66\xe8\x31\xcb\xe5\x17\x27\xd4\x2c\xfd\xf2\x96\xf4\xfb\x21\xcf\xc7\x6f\x50\x17\x7e\xa3\x8c\x14\x85\xdb\xdf\xe0\xcc\x5a\xba\x99\xd0\xb9\xaa\x7f\xd2\x9a\xd3\x69\xea\xc1\x1f\xc7\x1c\x6e\x25\x3f\xf4\x99\xfd\xb3\xca\x1a\x07\x19\xc7\xfb\xf1\x16\x53\x23\x1e\x81\x71\x33\xf9\xa5\xc4\x9f\x32\xe6\xe9\x15\x0e\x7c\xf5\x3d\xb2\x5b\xa9\xf2\xf3\x89\xe3\xfb\xc7\x6c\x74\xf8\x43\x87\x23\x98\xd4\x7f\x06\x27\x34\x37\xde\x55\x35\x0d\xe6\x27\x30\x53\x3f\x04\x9a\x58\x33\xf5\x30\xfa\x5d\x98\x86\x03\x14\x73\xb2\xff\x01\x7b\x4e\xe3\x53\x28\x05\xbf\xf2\xca\xaa\x61\x4b\xd7\xbc\xdb\x9e\xa1\xe2\x3e\x39\x89\xdf\x4f\x28\xde\x81\xe7\xff\xca\xac\xd0\x02\xc2\x2b\x27\x0f\xb7\xc5\xec\x67\xa5\xe7\x43\x5f\xb3\x8b\x4e\x84\xb5\x73\xcf\xbe\xe9\xfc\xd2\x8a\xd6\xfd\x82\xa6\xaf\xbb\x52\x6f\x57\x8f\x69\xe3\xdb\xe9\x23\xea\x1d\xf5\x48\xfc\x81\xee\xff\x0e\x00\x00\xff\xff\xb3\x78\x47\xce\x8e\x27\x00\x00")

func dataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dataBindataGo,
		"data/bindata.go",
	)
}

func dataBindataGo() (*asset, error) {
	bytes, err := dataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bindata.go", size: 10126, mode: os.FileMode(420), modTime: time.Unix(1452985331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xff\x4b\xe3\x4e\x10\xfd\x3d\x7f\xc5\xd0\xc2\x87\xcf\x81\x8d\x9b\x94\x5a\x5b\x10\x11\xf1\xbe\xa1\x77\xa0\x07\x07\xe7\x89\x6c\xb2\xd3\x64\x71\xb3\x1b\x76\x37\x5a\xfd\xeb\x6f\x66\xd3\x2a\xf7\xe3\x81\x29\x34\x9d\x79\x3b\xef\xcd\xbc\x9d\x4e\xe1\xdc\xf5\xcf\x5e\x37\x6d\x84\xff\xeb\x0f\x50\x8a\x62\x0e\x33\x7e\x2d\xa0\x32\xb2\x7e\x88\xae\x87\xaf\x2e\xb4\x83\x84\x2b\xa9\x2d\x1e\xc0\x99\x31\x70\xcd\x05\x01\xae\x31\xa0\x7f\x44\x95\x67\x53\xb8\x41\x84\xcb\x2f\xe7\x17\xdf\x6e\x2e\x60\xe3\x3c\x18\x5d\xa3\x0d\x08\xda\x52\xd4\xc9\xa8\x9d\xcd\xb3\x6c\xfa\x3e\x0f\xe9\x5d\x9d\xb1\x1a\xb5\x6f\x37\xba\x19\x7c\x12\x80\x7f\xe7\x79\xa7\x7e\xb2\xa8\xa3\x41\x38\x81\xc9\x95\xe4\xc9\xe1\x7a\xb0\x51\x77\xf8\x77\x7f\x93\x2c\xbb\x95\x43\x6c\x9d\xbf\xcb\x00\xac\xec\x52\xc5\xde\xe7\x09\xe5\xa6\xe0\x7c\x23\xad\x7e\x19\xe7\x21\xf4\x93\x8e\x9f\x87\x6a\xc4\x2a\xed\xde\x52\x44\xbd\x71\x83\x55\xe8\xe1\x3f\x38\xbf\xf8\xfe\xdb\x5e\xea\x07\x0c\x10\x65\xa4\x54\x74\x74\x3f\xd2\x2a\xa8\x10\x7d\x3e\x96\x2b\x57\x51\x79\xb1\x5a\xae\x66\x62\x31\x2b\x97\x3f\xc4\x72\x3d\x2f\xd7\x42\xfc\x22\xf0\xa3\xf6\x21\x42\x6d\x64\x08\xa0\x88\x22\x9c\xc2\xcf\xf6\x19\xac\x8b\xa7\xd4\xf5\x13\x56\xdc\xf2\xe0\x0d\x37\x20\xf2\xf4\x59\x1f\x0b\x26\x96\xaa\xd3\xf6\x7e\x07\x15\xe5\x32\x81\xc5\x7a\x4e\x0f\x0f\x8c\x9d\xd4\x86\x8b\x5b\x47\x02\x74\x24\x74\xb1\xcf\x71\x2b\xbb\xde\x60\x5e\xbb\x8e\x39\x7a\xe7\x19\x2b\x17\x2c\x42\x4b\xc5\xe7\xf8\xcd\x1e\x25\x9c\xdb\xa2\x1c\xbf\x9f\x9c\x57\x4c\x4c\x5d\xca\x4a\x06\xbc\x4b\x78\x6c\x19\xef\x92\xfb\xb9\x4a\x86\xa5\xe5\x4c\x54\xc5\xaa\xcc\x8b\xa3\xe3\xbc\xc8\x8b\xbd\x1a\xd3\xdd\xc2\xb1\x10\xc5\xc1\xdb\x77\x09\x4c\x56\x3b\x6b\xb1\xe6\x0b\xb8\xef\xe4\x96\xce\x2d\x84\x10\x94\x47\x2b\x2b\x83\x8a\x12\xd1\x0f\xc8\xa3\xd9\x47\xed\x9d\xed\xd0\x46\xae\xf3\x43\xba\x31\x85\x8f\x68\x5c\xcf\xd9\xd1\xf7\x5d\xbe\xf7\x4e\x0d\xf5\x7e\x0f\x94\xab\x1f\x30\xed\x41\x27\xeb\x96\xfe\x59\xb3\xfd\x3e\xec\xe2\x49\x52\x54\xbd\xd3\x36\xd9\x16\xeb\x7e\x7d\x78\xb8\x9f\x64\xb5\xca\x0b\x21\xd6\xe5\x7c\x79\xc4\x6c\xc6\x35\xcd\xc8\xb6\xd1\x06\xdf\x98\x92\x1b\x04\x4e\x92\xce\x36\xe8\x17\x06\x0a\x31\x86\xb2\xe1\x68\xbe\x8b\x2a\x5a\xc3\xa1\x67\x5f\x96\x94\x30\xae\x96\x26\xad\xf0\x09\x6c\xa4\x09\x3c\x2f\x4d\xb0\x7d\xbe\x7b\x75\xe2\x15\xa1\xbb\x8d\xb1\x67\xc5\xc9\xee\x77\x18\x83\x3f\x01\x00\x00\xff\xff\xcd\xe9\x18\xae\x5f\x04\x00\x00")

func dataConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_dataConfigToml,
		"data/config.toml",
	)
}

func dataConfigToml() (*asset, error) {
	bytes, err := dataConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config.toml", size: 1119, mode: os.FileMode(420), modTime: time.Unix(1452396945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPluginsToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x4b\x6f\x13\x31\x10\xc7\xef\xfb\x29\x46\xc9\x05\x10\x6d\x78\x88\x23\x87\x28\x69\xa1\x28\x84\x68\x53\x7a\xa9\x7a\x98\xd8\xb3\x9b\x11\x7e\xc9\xf6\x56\xe4\xdb\x33\x4e\xb5\x85\x86\xa2\x2c\x52\xf6\xb0\x96\xc7\x33\xf3\xff\x69\x1e\x63\x98\xf9\xb0\x8b\xdc\x6e\x33\xbc\x50\x2f\xe1\xdd\x9b\xb7\xef\xe1\xac\x1c\x1f\x60\x63\x50\xfd\xc8\x3e\xc0\x17\x9f\xb6\x1d\xc2\x57\x64\x47\xaf\x61\x6a\x0c\xd4\x25\x20\x41\x4d\x89\xe2\x3d\xe9\xf3\x6a\x0c\x6b\x22\x58\x5c\xcd\x2e\x96\xeb\x0b\x68\x7c\x04\xc3\x8a\x5c\x22\x60\x27\x37\x8b\x99\xbd\x3b\xaf\xaa\xf1\x69\x3e\xd1\x5b\x2d\xbe\x7f\xba\x5a\x0a\xbe\x6b\xb8\xed\xe2\x5e\x00\xfe\x3f\xcf\x89\x78\xaa\xdb\xdb\x60\xba\x96\xdd\xdd\x5d\x05\xe0\xd0\x12\x7c\x84\x91\x4b\xd1\x8c\xe4\x4e\x0e\x37\x86\xb4\x98\x1a\x34\x89\xc4\xa2\x29\xa9\xc8\x61\x0f\x2d\x8e\xcb\x75\xbd\x80\x39\x66\xdc\xa0\x94\xec\x33\xa6\xad\xd4\x13\xa3\xda\x96\x68\x85\x99\x5a\x1f\x77\xc5\x71\xc3\x0e\xe3\xae\x58\xd9\x62\xbb\x17\xe9\xdb\x34\xe9\xd5\x2c\x3f\xa8\xbf\x1a\xfd\x03\xab\x61\x43\xa5\x2d\x4f\xd1\x72\xec\x9e\x21\x4b\x49\x13\x85\xc9\x75\xcd\xf3\x09\xfd\xe4\x26\x7b\x6f\x0e\xa1\x2c\x65\xd4\x02\xff\x04\xcb\x62\x99\x80\xc9\x9f\x5a\x47\xc1\x94\x41\x8b\xf7\x43\xb0\x66\xe2\x39\xbd\x39\x04\x79\x88\x3d\x44\xf8\x9d\xf5\x78\x65\x42\xf4\x79\x88\xfe\xe5\xd9\xaa\xfe\x76\x0d\x53\x97\xf9\x86\x63\x97\x86\x91\x3c\xa6\x3f\x0a\x12\x74\xc3\x7a\xd0\xe8\xac\xe6\x97\x3c\x97\x95\x2d\x8d\x91\x9f\xf0\x72\x11\x15\x33\x68\xaf\x3a\x4b\x2e\xff\x45\xd7\x3f\x3c\x3f\x47\x8f\xda\x3d\x25\x86\x20\xf8\xfb\x0d\x2b\x8f\xa3\xea\x57\x00\x00\x00\xff\xff\x2d\x0a\x9b\xfb\x36\x04\x00\x00")

func dataPluginsTomlBytes() ([]byte, error) {
	return bindataRead(
		_dataPluginsToml,
		"data/plugins.toml",
	)
}

func dataPluginsToml() (*asset, error) {
	bytes, err := dataPluginsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/plugins.toml", size: 1078, mode: os.FileMode(420), modTime: time.Unix(1452755045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bindata.go": dataBindataGo,
	"data/config.toml": dataConfigToml,
	"data/plugins.toml": dataPluginsToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{dataBindataGo, map[string]*bintree{}},
		"config.toml": &bintree{dataConfigToml, map[string]*bintree{}},
		"plugins.toml": &bintree{dataPluginsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

