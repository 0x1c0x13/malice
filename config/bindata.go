// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4b\x6f\xdb\x3c\x10\xbc\xf3\x57\x2c\xe4\xcb\xf7\x01\x8d\x2c\x4b\x4e\xe2\x0a\xf0\x21\x08\x72\x48\xd1\xb4\x40\x72\x34\x82\x62\x25\xad\x25\xc2\x7c\x81\xa4\x9c\xc7\xaf\x2f\x96\x72\x1e\x46\x73\x68\x81\xd0\x07\x9a\x3b\xbb\x3b\xb3\xb3\xf6\x0c\x2e\xad\x7b\xf2\xb2\x1f\x22\xfc\xd7\xfe\x0f\x65\xb1\xa8\xe0\x84\xaf\x15\x34\x0a\xdb\x5d\xb4\x0e\xbe\xd9\x30\x8c\x08\x37\x28\x0d\x7d\x81\x0b\xa5\xe0\x96\x0b\x02\xdc\x52\x20\xbf\xa7\x2e\x17\x33\xb8\x23\x82\xef\xd7\x97\x57\x3f\xee\xae\x60\x6b\x3d\x28\xd9\x92\x09\x04\xd2\x6c\xad\xd7\x18\xa5\x35\xb9\x10\xb3\xcf\x39\x62\x06\x37\x17\xcc\x06\x97\xd6\x6c\x65\x3f\xfa\x44\x00\xff\xde\xe7\x93\xf4\x88\x28\xa3\x22\x58\x43\x76\x83\x3c\x39\xdc\x8e\x26\x4a\x4d\xc7\xfa\x32\xb1\x27\x1f\x58\xe8\x1a\xb2\x7d\x91\x57\xf9\x62\x99\x09\xb1\xc1\x31\x0e\xd6\xdf\x0b\x00\x83\x3a\x75\x79\xf1\x3e\x13\x00\xd6\xf7\x68\xe4\xf3\x34\xe1\x2b\xc3\xf5\x4f\xae\x7c\xa0\x86\xcb\x46\xaf\x18\x29\xf2\xf4\xa9\x57\x05\xd7\x61\xa7\xa5\xf9\x75\x80\x16\xe5\x79\x02\x17\x75\x55\x55\x15\x97\x92\x46\xa9\xb8\x78\xb0\x21\x72\x4a\xd0\xd1\xe5\xf4\x88\xda\x29\xca\x5b\xab\xb9\x87\xb3\x9e\xb1\xf2\x94\x49\x02\x79\xce\xe3\x9b\x75\x26\x1c\x43\xe0\x18\xdf\x0f\xd6\x77\xdc\xb8\xc3\x88\x0d\x06\x7a\x3f\x8f\x4e\x9a\x4f\x48\x61\x88\xb2\xe5\x4a\xa9\xb1\x7f\x07\xcd\x0f\x50\x20\xf4\xed\x50\x9f\xe5\x15\x27\xa5\x9f\x57\x22\x55\xb6\x45\xc5\x4a\x5f\x54\x31\xed\xe6\x6b\x59\x14\x4c\xc3\x56\xdb\x31\x29\x2d\x04\x00\x19\x6c\x14\x75\xb0\x86\xe8\x47\x12\x62\x33\xca\x0f\xc4\xec\x64\x83\x06\x3f\xd2\x32\x21\x7f\x2b\x62\xb9\xac\xee\x3f\x22\x25\xb3\x97\xde\x1a\x4d\x26\x32\xee\xc7\xb4\xbd\x8e\xf6\xa4\xac\xe3\x68\x32\xcb\xb6\x3b\x4a\xab\xd7\xd8\x0e\xd2\xd0\xc9\xb1\xca\x2c\x75\xee\x9c\x95\x26\x2d\x29\xb6\xae\x9e\xcf\x5f\x85\xd4\x65\x75\x7e\x96\x1d\x39\xb0\x48\x16\x34\xd2\x74\xe1\xad\x4d\x3d\xd7\xa8\x1e\xd0\x53\xed\x2d\xa7\x2b\x69\x76\xe1\xcf\xc5\xd4\x47\x5b\xe0\xc4\xd6\x8d\xb0\x86\xd3\xe2\x70\x58\x27\x69\xeb\x9f\x38\x58\x2e\xcb\xd5\x8a\x83\x62\xa3\x6c\xdf\x4f\x63\x6c\xa5\xa2\xe3\x11\x72\x65\xfb\x2c\x0d\xf8\x18\xe4\x33\x03\x8b\x62\x7a\x4e\xae\x57\x87\x57\x83\xed\x6e\x74\xac\xea\x9c\x15\xf2\x88\xe9\x2f\xb4\x86\x2d\xaa\xc0\x8e\x3a\x6f\x1f\x9f\xde\xbc\x7e\x45\x00\x86\x18\x1d\x33\x66\x87\xef\x61\x7a\xfc\x0e\x00\x00\xff\xff\x53\xe2\x02\xe5\xdf\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1247, mode: os.FileMode(420), modTime: time.Unix(1532881470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

