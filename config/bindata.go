// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x5d\x6b\xdb\x4a\x10\x7d\xd7\xaf\x18\x64\xb8\xdc\x0b\xd7\xb2\x2c\x91\xb8\x11\x98\x10\xdc\xf4\x8b\xb8\x85\x24\x50\xa8\x1b\xca\x48\x1a\x4b\x8b\x57\x3b\x62\x77\x95\x38\xf9\xf5\x65\x56\x4e\x52\x3f\x16\x22\x3d\xac\x76\x3e\xcf\x39\x33\x9a\xc0\x8a\xfb\x47\xab\x9a\xd6\xc3\xbf\xd5\x7f\x90\xa5\xf3\x1c\xa6\x72\x9c\x42\xa9\xb1\xda\x79\xee\xe1\x0b\xbb\x76\x40\x58\xa3\x32\xf4\x3f\x5c\x68\x0d\xd7\x92\xe0\xe0\x9a\x1c\xd9\x7b\xaa\x93\x68\x02\x37\x44\x70\xf5\x79\x75\xf9\xf5\xe6\x12\xb6\x6c\x41\xab\x8a\x8c\x23\x50\x66\xcb\xb6\x43\xaf\xd8\x24\x51\x34\x79\x9b\x27\x9a\xc0\xfa\x42\xba\xc1\x8a\xcd\x56\x35\x83\x0d\x0d\xe0\xef\xeb\xbc\x11\x9e\xc8\x2b\xaf\x09\x96\x10\xaf\x51\x98\xc3\xf5\x60\xbc\xea\xe8\x18\x5f\x1c\x45\x1b\x1c\x7c\xcb\xf6\x2e\x02\x30\xd8\x85\x8c\x67\x9d\xe3\x08\x60\x02\x6c\x1b\x34\xea\x69\xe4\xb3\x84\xf8\xa3\xf2\x9f\x86\x72\xf4\x95\x8a\x5f\x4d\xb0\xe2\x2d\x0f\xa6\x26\x0b\xff\xc0\xea\xf2\xdb\x4f\x73\xa5\x76\xe4\xc0\xa3\x27\x0b\x9e\xbd\x03\x34\x35\x94\x44\x36\x19\xd3\x6b\x2e\x61\x09\xf3\xb3\xc5\xd9\x34\x3d\x99\x66\x8b\xdb\x74\x51\xe4\x59\x91\xa6\x3f\x60\x02\x1f\x94\x75\x1e\x2a\x8d\xce\x41\x8d\x9e\xdc\x39\x7c\x6f\x1f\xc1\xb0\x3f\x8f\xa2\xcd\x03\x95\x02\x79\xb0\x5a\x00\xa4\x49\x78\x8b\x77\xa9\x14\xc6\xba\x53\xe6\xd7\xc1\x35\xcf\x16\xc1\x39\x2f\xf2\x3c\xcf\x85\x30\x75\xa8\xb4\x24\xb7\xec\xbc\x84\xb8\xce\xf7\x09\xed\xb1\xeb\x35\x25\x15\x77\x52\xa3\x67\x2b\xbe\xec\x44\x9a\x38\xb2\x12\x27\xa7\x68\x14\xfc\x02\x6b\x09\xb1\x9c\x0f\x6c\x6b\x29\x5c\xa3\xc7\x12\x1d\xfd\xa9\x65\x17\xd4\x9f\x92\xde\x49\x96\xea\xb0\x39\x92\x78\x46\x1a\x9d\x57\xd5\xd4\x79\xac\x76\xc5\x18\x2d\x91\x61\x8f\x43\x57\xcd\x15\x6a\x81\x1a\xc3\x04\x6e\x5b\xe5\x40\xb9\xb0\xd0\x76\x30\x46\x99\x06\xd8\xc0\x7b\xae\x76\x64\x83\x75\x8d\x15\x28\xe3\x3c\x6a\x1d\x46\xe6\x92\x03\x1b\x81\xbb\x81\xb3\x2c\x4d\x41\x00\xca\x32\xf0\x20\x1c\xe7\x69\x04\x40\x06\x4b\x4d\x35\x2c\xc1\xdb\x81\x44\x25\x73\xaf\x2c\x9b\x8e\x8c\x97\x70\x3b\x84\xe1\xd7\x74\x4f\x9a\x7b\xb1\x8e\x23\x3c\xd8\x7b\xcb\xf5\x50\x3d\xaf\x54\x1d\xe0\x48\x5a\x87\x55\xab\x0c\x4d\x8f\xe5\x88\x43\xc3\xba\x67\x65\xc2\x00\x7c\xd5\x17\xb3\xd9\x0b\xd1\x22\xcb\x17\xa7\x12\x53\x2a\x53\xbb\xd7\xb4\x62\xd6\xa1\x7e\x40\x4b\x85\x65\x71\x6b\x65\x76\xee\x58\xe4\xe2\xa0\x67\x7c\xcc\x30\x4b\xa3\x68\xa3\xb9\x69\x46\x54\x5b\xa5\xe9\x18\x51\xa2\xb9\x89\x03\xde\xbd\x53\x4f\xf4\xac\x4a\x87\xfb\x71\x60\xf9\xe1\x56\x62\xb5\x1b\x7a\x69\xba\x10\x00\x82\x38\xfc\x55\x4b\xd8\xa2\x76\xa2\x5b\x6f\x79\xff\x78\xf7\xa2\xe8\x8b\x07\xa0\xf5\xbe\x97\x8e\xf1\xe1\xdb\x8d\x97\xdf\x01\x00\x00\xff\xff\x14\x18\x6d\x03\xf2\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1480179411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

