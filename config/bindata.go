// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\x6f\xdb\x30\x0c\x86\xef\xfa\x15\x84\x73\xd9\x80\xd5\x71\xec\x74\x69\x0d\xe4\x50\x14\x3d\x74\x58\x37\xa0\x3d\x06\xc5\x40\xdb\x8c\x2d\x44\x5f\x90\xe4\xf4\xe3\xd7\x0f\x94\xd3\x76\xc1\x7a\xd8\x80\x3a\x07\x45\x7a\x49\xbe\x0f\x29\x7b\x06\x97\xd6\x3d\x79\xd9\x0f\x11\x3e\xb5\x9f\xa1\x2c\x16\x15\x9c\xf0\xb2\x82\x46\x61\xbb\x8b\xd6\xc1\x37\x1b\x86\x11\xe1\x06\xa5\xa1\x2f\x70\xa1\x14\xdc\x72\x42\x80\x5b\x0a\xe4\xf7\xd4\xe5\x62\x06\x77\x44\xf0\xfd\xfa\xf2\xea\xc7\xdd\x15\x6c\xad\x07\x25\x5b\x32\x81\x40\x9a\xad\xf5\x1a\xa3\xb4\x26\x17\x62\xf6\x31\x8f\x98\xc1\xcd\x05\xbb\xc1\xa5\x35\x5b\xd9\x8f\x3e\x19\xc0\xff\xd7\xf9\x20\x1e\x11\x65\x54\x04\x6b\xc8\x6e\x90\x3b\x87\xdb\xd1\x44\xa9\xe9\x98\x2f\x13\x7b\xf2\x81\x41\xd7\x90\xed\x8b\xbc\xca\xcf\x33\x21\x36\x38\xc6\xc1\xfa\x7b\x01\x60\x50\xa7\x22\x2f\xa3\xcf\x04\x80\xf5\x3d\x1a\xf9\x3c\x35\xf8\x6a\x70\xfd\x93\x33\x1f\xa8\xe1\xb4\xd1\x2b\x56\x8a\x3c\xfd\xea\xb3\x82\xf3\xb0\xd3\xd2\xfc\x3a\x48\x8b\x72\x95\xc4\x45\x5d\x55\x55\xc5\xa9\xa4\x51\x2a\x4e\x1e\x6c\x88\x1c\x12\x74\x74\x39\x3d\xa2\x76\x8a\xf2\xd6\x6a\xae\xe1\xac\x67\xad\x3c\x65\x93\x40\x9e\xe3\x78\x65\xce\xa4\x63\x08\x7c\xc6\xeb\x83\xf5\x1d\x17\xee\x30\x62\x83\x81\xfe\xec\x47\x27\xe6\x13\x52\x18\xa2\x6c\x39\x53\x6a\xec\x8f\x5a\x9d\x1f\xc4\x40\xe8\xdb\xa1\x3e\xcd\x97\x1c\x96\xde\xaf\x64\xab\x6c\x8b\x8a\x59\x5f\xb8\xd8\x78\x73\x5e\x16\x05\x1b\xf1\xac\xed\x98\x58\x0b\x01\x40\x06\x1b\x45\x1d\xac\x21\xfa\x91\x84\xd8\x8c\xf2\x1d\x9c\x9d\x6c\xd0\xe0\xfb\x34\x93\x56\x4f\x91\xff\x42\xb2\x5c\x56\xf7\xef\x39\x93\xd9\x4b\x6f\x8d\x26\x13\x59\xf7\x63\xba\xc4\x8e\xf6\xa4\xac\xe3\xd3\x34\x33\xdb\xee\x28\xbd\x01\x1a\xdb\x41\x1a\x3a\x39\x46\xcd\x52\xe5\xce\x59\x69\xd2\x5d\xc5\xd6\xd5\xf3\xf9\x2b\x48\x5d\x56\xab\xaf\xd9\xd1\x18\x16\x69\x0e\x8d\x34\x5d\x78\x2b\x53\xcf\x35\xaa\x07\xf4\x54\x7b\xcb\xe1\x4a\x9a\x5d\xf8\xfb\x7e\xea\xa3\xab\xe0\xc0\xd6\x8d\xb0\x86\xd3\xe2\xf0\x30\x27\x69\xeb\x9f\xf8\xb0\x5c\x96\x67\x67\x7c\x28\x36\xca\xf6\xfd\xd4\xc6\x56\x2a\x3a\x6e\x21\x57\xb6\xcf\x52\x83\x8f\x41\x3e\xb3\xb0\x28\xa6\xed\x34\xfa\xea\xb0\x6b\xb0\xdd\x8d\x8e\xa9\x56\x4c\xc8\x2d\xa6\x0f\x69\x0d\x5b\x54\x81\x27\xea\xbc\x7d\x7c\x7a\x9b\xf5\xab\x02\x30\xc4\xe8\xd8\x31\x3b\xfc\x0f\xd3\xe6\x77\x00\x00\x00\xff\xff\xf1\xe1\x5e\xd4\xe5\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1499554291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

