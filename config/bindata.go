// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x5d\x6b\xeb\x46\x10\x7d\xdf\x5f\x31\xc8\x2f\x2d\xd4\xb2\x2c\xdd\x5c\x37\x02\x13\x42\x9a\x42\x4a\xdd\x42\x12\x28\xd4\x94\x32\x92\xc6\xd2\xd4\xab\x5d\xb1\xbb\x4a\x9c\xfc\xfa\x32\x2b\x27\xa9\x49\x5e\x0a\xb9\xf6\xc3\x7a\xf7\xcc\xc7\x39\x33\xc7\x33\xb8\xb2\xc3\x93\xe3\xb6\x0b\xf0\x5d\xfd\x3d\xe4\xd9\xb2\x80\xb9\x1c\x5f\xa1\xd2\x58\xef\x83\x1d\xe0\x17\xeb\xbb\x11\x61\x83\x6c\xe8\x07\xb8\xd4\x1a\x6e\x25\xc1\xc3\x2d\x79\x72\x0f\xd4\xa4\x6a\x06\x77\x44\xf0\xeb\xcd\xd5\xf5\x6f\x77\xd7\xb0\xb3\x0e\x34\xd7\x64\x3c\x01\x9b\x9d\x75\x3d\x06\xb6\x26\x55\x6a\xf6\x39\x1f\x35\x83\xcd\xa5\x74\x83\x2b\x6b\x76\xdc\x8e\x2e\x36\x80\xff\x5f\xe7\x93\xf8\xa8\xc0\x41\x13\xac\x21\xd9\xa0\x28\x87\xdb\xd1\x04\xee\xe9\x94\x5f\xa2\xd4\x16\xc7\xd0\x59\xf7\x97\x02\x30\xd8\xc7\x8c\x97\x39\x27\x0a\xc0\xba\x16\x0d\x3f\x4f\x6a\x5e\xab\xdd\xfc\x2e\x58\xc5\x56\x9e\x6e\xe0\x9f\xd1\x07\xd0\xbc\x27\xa8\x46\xd6\x0d\x9b\x16\x42\xc7\xa6\xf5\xa9\x84\xcd\xa0\xb1\x15\xac\x61\x79\xbe\x3a\x9f\x67\x67\xf3\x7c\x75\x9f\xad\xca\x22\x2f\xb3\xec\x4f\x98\xc1\xcf\xec\x7c\x80\x5a\xa3\xf7\xd0\x60\x20\x7f\x01\x7f\x74\x4f\x60\x6c\xb8\x50\x6a\xfb\x48\x95\x50\x1b\x9d\x96\x56\x59\x1a\xbf\xe5\x8f\x99\x14\xc6\xa6\x67\xf3\xf7\x11\x5a\xe6\xab\x08\x2e\xcb\xa2\x28\x0a\x11\x46\x3d\xb2\x96\xe4\xce\xfa\x20\x21\xbe\x0f\x43\x4a\x07\xec\x07\x4d\x69\x6d\x7b\xa9\x31\x58\x27\x58\x7e\x26\x4d\x3c\x39\x89\x93\x53\x66\x11\x71\xa1\xb5\x86\x44\xce\x47\xeb\x1a\x29\xdc\x60\xc0\x0a\x3d\xfd\x77\x66\x7d\x9c\xcb\x9c\x34\xfa\xc0\xb5\x64\x72\x8f\xed\xc9\x38\x17\x47\xd0\x13\xba\xba\x2b\xcf\xd2\x42\xc2\xa2\x61\x63\x5b\x6d\x6b\xd4\xc2\x35\x81\x19\xdc\x77\xec\x81\x7d\x74\xae\x1b\x8d\x91\x99\x5a\x03\x3f\xd9\x7a\x4f\x2e\xbe\x6e\xb0\x06\x36\x3e\xa0\xd6\x71\x3b\x3e\x3d\xca\x11\xbe\x5b\x38\xcf\xb3\x0c\x84\xa1\x6c\xdd\x8e\x22\x72\x99\x29\x00\x32\x58\x69\x6a\x60\x0d\xc1\x8d\xa4\xd4\x76\xe4\x0f\x74\xec\xb9\x42\x83\x1f\xcb\x98\xb0\x72\x8a\xfc\x96\x12\xbe\x7c\x29\xa2\x82\x77\x94\xc9\x3c\xb0\xb3\xa6\x27\x13\x04\x77\x63\xb4\x66\x43\x0f\xa4\xed\x20\xaf\x93\xed\x8e\xef\x83\xb3\xcd\x58\xbf\xd8\xbd\x89\xed\x25\xad\xc7\xba\x63\x43\xf3\x53\xe9\x49\x6c\xd8\x0c\x96\x4d\x34\x4d\xa8\x87\x72\xb1\x78\x15\x56\xe6\xc5\xea\xeb\x64\x7e\xd3\xf8\xb7\xb4\x72\xd1\xa3\x7e\x44\x47\xa5\xb3\x02\x6b\x36\x7b\xff\xde\x18\xe5\x89\x07\x92\xd3\xf5\xe4\x99\x52\x5b\x6d\xdb\x76\xe2\xb7\x63\x4d\xa7\xdc\x52\x6d\xdb\x24\x32\x3f\x78\x7e\xa6\x97\x95\xf6\x78\x98\x76\x54\x1c\x6f\x15\xd6\xfb\x71\x90\xf6\x2b\xa1\x22\xdc\xe3\x7f\x7f\x0d\x3b\xd4\x5e\x26\x38\x38\x7b\x78\x7a\x9b\xed\x2b\x02\xd0\x85\x30\x48\xc7\xe4\xf8\xdb\x4f\x97\x7f\x03\x00\x00\xff\xff\x64\x3b\x92\x4b\x98\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1432, mode: os.FileMode(420), modTime: time.Unix(1492189435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

