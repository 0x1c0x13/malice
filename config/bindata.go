// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x7f\x4b\xe3\x40\x10\xfd\xbf\x9f\x62\x68\xe1\xb8\x03\x1b\x37\x29\xb5\x36\x20\x22\x9e\xf7\x0b\x7b\x07\x2a\x1c\x9c\x27\xb2\xc9\x4e\x9b\xc5\xcd\x6e\xd8\xdd\x68\xf5\xd3\xdf\xcc\xa6\x2a\xfe\x79\x60\x5a\xba\x9d\x79\x33\xf3\xde\xcc\x4e\x26\x70\xea\xba\x47\xaf\x37\x4d\x84\x8f\xf5\x27\x28\x44\x3e\x83\x29\x1f\x73\xa8\x8c\xac\xef\xa2\xeb\xe0\x87\x0b\x4d\x2f\x61\x25\xb5\xc5\x3d\x38\x31\x06\x2e\x38\x21\xc0\x05\x06\xf4\xf7\xa8\xb2\xd1\x04\x2e\x11\xe1\xfc\xfb\xe9\xd9\xcf\xcb\x33\x58\x3b\x0f\x46\xd7\x68\x03\x82\xb6\x64\xb5\x32\x6a\x67\xb3\xd1\x68\xf2\x3e\x0f\xf1\xad\x4e\x98\x8d\xe4\xdb\xb5\xde\xf4\x3e\x11\xc0\xff\xd7\x79\x27\x3d\xa3\xa8\xa3\x41\x38\x82\xf1\x4a\x72\xe7\x70\xd1\xdb\xa8\x5b\x7c\xab\x6f\x3c\x1a\x5d\xcb\x3e\x36\xce\xdf\x8c\x00\xac\x6c\x53\xc6\xf3\x9c\xc7\xe4\x9b\x80\xf3\x1b\x69\xf5\xd3\xd0\x0f\xa1\x5f\x75\xfc\xd6\x57\x03\x56\x69\xf7\xea\xa2\xd2\x6b\xd7\x5b\x85\x1e\x3e\xc0\xe9\xd9\xaf\xbf\xf6\x5c\xdf\x61\x80\x28\x23\xb9\xa2\xa3\xfb\x91\x56\x41\x85\xe8\xb3\x21\x5d\xb9\x8a\xd2\xf3\xe5\x62\x39\x15\xf3\x69\xb1\xb8\x12\x8b\x72\x56\x94\x42\xfc\x21\xf0\x8b\xf6\x21\x42\x6d\x64\x08\xa0\xa8\x44\x38\x86\xdf\xcd\x23\x58\x17\x8f\x49\xf5\x03\x56\x2c\xb9\xf7\x86\x05\x88\x2c\x7d\xca\x43\xc1\x85\xa5\x6a\xb5\xbd\xdd\x41\x79\xb1\x48\x60\x5e\xce\xe8\xe1\x86\xb1\x95\xda\x70\x72\xe3\x88\x80\x42\x42\x1b\xbb\x0c\xb7\xb2\xed\x0c\x66\xb5\x6b\xb9\x46\xe7\x3c\x63\xc5\x9c\x49\x68\xa9\x38\x8e\x4f\x9e\x51\xc2\x59\x16\xf9\xf8\x7c\x70\x5e\x71\x61\x52\x29\x2b\x19\xf0\x26\xe1\xb1\x61\xbc\x4d\xd3\xcf\x54\x1a\x58\x5a\xce\x54\xca\xb8\x5a\x1a\xe6\x1f\x53\xa7\x57\x8d\x0e\x40\x5f\xde\x52\xdf\x5b\xab\xed\x06\x68\xd6\x9f\x5d\x7d\x47\xd1\xec\x5d\xc9\x9a\xf6\x36\x44\x69\x4c\xba\x87\x90\xed\x24\xb2\x86\x6b\x38\x14\x22\xdf\x7b\xfd\x2d\x80\x15\xd4\xce\x5a\xac\x39\xfa\xb6\x95\x5b\x8a\x9b\x0b\x21\xc8\x8f\x56\x56\x06\x15\x39\xa2\xef\x91\xe7\x61\xef\xb5\x77\xb6\x45\x1b\x39\x8f\x14\xb0\x42\x85\xf7\x68\x5c\xc7\xde\xe1\xb2\x76\xfe\xce\x3b\xd5\xd7\xcf\xcb\xa3\x92\x46\x4e\x6b\x65\xdd\xd0\xeb\x38\x7d\x5e\xa2\xa1\xf1\x71\x22\x54\x9d\xd3\x36\x8d\x3a\xd6\x5d\xb9\xbf\x9f\x2f\x8b\x2c\x3f\x38\xcc\x96\xcb\x2c\x17\xa2\x2c\x66\x8b\x03\x0e\xac\xb4\x55\xe1\x35\xb7\xdc\xa7\xf3\x41\x7a\x2c\xbd\x63\x98\xd7\xd7\xf5\x5c\x26\x2f\x04\x71\x1b\xb7\xd9\x0c\xdc\x6b\x6d\xf0\x2d\x6f\x46\xe0\x38\xa9\xda\x06\xfd\xc4\x40\x2e\x06\x53\x6e\xd8\x9a\xed\xac\x8a\x36\xbd\xef\x98\x74\x41\x8e\x74\x2b\xe9\x2d\x39\x82\xb5\x34\x81\xa7\x43\xfd\x6e\x1f\x6f\x5e\xe6\xf6\x82\xd0\xfa\xc4\xd8\x31\xe3\x78\xf7\x3f\x0c\xc6\xbf\x00\x00\x00\xff\xff\x8e\xf4\xf2\xc1\xc2\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1218, mode: os.FileMode(420), modTime: time.Unix(1469388878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

