// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x49\x6f\xdb\x3c\x10\xbd\xf3\x57\x0c\xe4\xcb\xf7\x01\x8d\x2c\x4b\x59\x5c\x01\x3e\x04\x41\x0e\x29\x9a\x16\x48\x8e\x46\x50\x8c\xa4\xb1\x44\x98\x1b\x48\xca\x59\x7e\x7d\x31\x94\xb3\x18\xf5\xa1\x05\x42\x1f\x68\xce\x9b\x99\xf7\xe6\x8d\x3d\x83\x2b\xeb\x9e\xbd\xec\x87\x08\xff\xb5\xff\x43\x59\x2c\x2a\x38\xe1\x6b\x09\x8d\xc2\x76\x1b\xad\x83\x6f\x36\x0c\x23\xc2\x2d\x4a\x43\x5f\xe0\x52\x29\xb8\xe3\x82\x00\x77\x14\xc8\xef\xa8\xcb\xc5\x0c\xee\x89\xe0\xfb\xcd\xd5\xf5\x8f\xfb\x6b\xd8\x58\x0f\x4a\xb6\x64\x02\x81\x34\x1b\xeb\x35\x46\x69\x4d\x2e\xc4\xec\x73\x8e\x98\xc1\xed\x25\xb3\xc1\x95\x35\x1b\xd9\x8f\x3e\x11\xc0\xbf\xf7\xf9\x24\x3d\x22\xca\xa8\x08\x56\x90\xdd\x22\x4f\x0e\x77\xa3\x89\x52\xd3\xa1\xbe\x4c\xec\xc8\x07\x16\xba\x82\x6c\x57\xe4\x55\xbe\xa8\x32\x21\xd6\x38\xc6\xc1\xfa\x07\x01\x60\x50\xa7\x2e\xaf\xde\x67\x02\xc0\xfa\x1e\x8d\x7c\x99\x26\x7c\x63\xb8\xf9\xc9\x95\x8f\xd4\x70\xd9\xe8\x15\x23\x45\x9e\x3e\xf5\xb2\xe0\x3a\xec\xb4\x34\xbf\xf6\xd0\xa2\xbc\x48\xe0\xa2\xae\xaa\x2a\x91\x92\x46\xa9\xb8\x78\xb0\x21\x72\x4a\xd0\xd1\xe5\xf4\x84\xda\x29\xca\x5b\xab\xb9\x87\xb3\x9e\xb1\xf2\x8c\x49\x02\x79\xce\xe3\x9b\x75\x26\x1c\x43\xe0\x18\xdf\x8f\xd6\x77\xdc\xb8\xc3\x88\x0d\x06\xfa\x38\x8f\x4e\x9a\x4f\x48\x61\x88\xb2\xe5\x4a\xa9\xb1\xff\x00\xcd\xf7\x50\x20\xf4\xed\x50\x9f\xe7\x15\x27\xa5\x9f\x57\x22\x55\xb6\x45\xc5\x4a\x5f\x55\x31\xed\xfa\x6b\x59\x14\x4c\xc3\x56\xdb\x31\x29\x2d\x04\x00\x19\x6c\x14\x75\xb0\x82\xe8\x47\x12\x62\x3d\xca\x23\x62\xb6\xb2\x41\x83\xc7\xb4\x4c\xc8\xdf\x8a\x38\x3d\xad\x1e\x8e\x91\x92\xd9\x49\x6f\x8d\x26\x13\x19\xf7\x63\xda\x5e\x47\x3b\x52\xd6\x71\x34\x99\x65\xdb\x2d\xa5\xd5\x6b\x6c\x07\x69\xe8\xe4\x50\x65\x96\x3a\x77\xce\x4a\x93\x96\x14\x5b\x57\xcf\xe7\x6f\x42\xea\xb2\xba\x38\xcf\x0e\x1c\x58\x24\x0b\x1a\x69\xba\xf0\xde\xa6\x9e\x6b\x54\x8f\xe8\xa9\xf6\x96\xd3\x95\x34\xdb\xf0\xe7\x62\xea\x83\x2d\x70\x62\xeb\x46\x58\xc1\x59\xb1\x3f\xac\x93\xb4\xf5\xcf\x1c\x2c\x4f\xcb\xe5\x92\x83\x62\xad\x6c\xdf\x4f\x63\x6c\xa4\xa2\xc3\x11\x72\x65\xfb\x2c\x0d\xf8\x14\xe4\x0b\x03\x8b\x62\x7a\x4e\xae\x57\xfb\x57\x83\xed\x76\x74\xac\xea\x82\x15\xf2\x88\xe9\x2f\xb4\x82\x0d\xaa\xc0\x8e\x3a\x6f\x9f\x9e\xdf\xbd\x7e\x43\x00\x86\x18\x1d\x33\x66\xfb\xef\x61\x7a\xfc\x0e\x00\x00\xff\xff\xf6\xc6\xa7\x92\xdf\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1247, mode: os.FileMode(420), modTime: time.Unix(1532843984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

