// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfa\x14\x84\x73\x79\x1e\x60\x75\x1c\x3b\x5d\x32\x03\x39\x14\x45\x0f\x1d\xd6\x0d\x68\x8f\x41\x31\xd0\x36\x63\x0b\xd1\x1b\x24\x39\x7d\xf9\xf4\x03\xe5\xb4\x5d\xb0\x1e\x36\xa0\xce\x41\x91\xfe\x24\xff\x3f\x52\xf6\x0c\x2e\xad\x7b\xf2\xb2\x1f\x22\xfc\xd7\xfe\x0f\x65\xb1\xa8\xe0\x8c\x97\x15\x34\x0a\xdb\x7d\xb4\x0e\xbe\xda\x30\x8c\x08\x37\x28\x0d\x7d\x82\x0b\xa5\xe0\x96\x13\x02\xdc\x52\x20\x7f\xa0\x2e\x17\x33\xb8\x23\x82\x6f\xd7\x97\x57\xdf\xef\xae\x60\x67\x3d\x28\xd9\x92\x09\x04\xd2\xec\xac\xd7\x18\xa5\x35\xb9\x10\xb3\x8f\x79\xc4\x0c\x6e\x2e\xd8\x0d\x2e\xad\xd9\xc9\x7e\xf4\xc9\x00\xfe\xbd\xce\x07\xf1\x88\x28\xa3\x22\xd8\x40\x76\x83\xdc\x39\xdc\x8e\x26\x4a\x4d\xa7\x7c\x99\x38\x90\x0f\x0c\xba\x81\xec\x50\xe4\x55\xbe\xce\x84\xd8\xe2\x18\x07\xeb\xef\x05\x80\x41\x9d\x8a\xbc\x8c\x3e\x13\x00\xd6\xf7\x68\xe4\xf3\xd4\xe0\xab\xc1\xf5\x0f\xce\x7c\xa0\x86\xd3\x46\xaf\x58\x29\xf2\xf4\xab\xd7\x05\xe7\x61\xa7\xa5\xf9\x79\x94\x16\xe5\x2a\x89\x8b\xba\xaa\xaa\x8a\x53\x49\xa3\x54\x9c\x3c\xd8\x10\x39\x24\xe8\xe8\x72\x7a\x44\xed\x14\xe5\xad\xd5\x5c\xc3\x59\xcf\x5a\x79\xce\x26\x81\x3c\xc7\xf1\xca\x9c\x49\xc7\x10\xf8\x8c\xd7\x07\xeb\x3b\x2e\xdc\x61\xc4\x06\x03\xfd\xde\x8f\x4e\xcc\x67\xa4\x30\x44\xd9\x72\xa6\xd4\xd8\x9f\xb4\x3a\x3f\x8a\x81\xd0\xb7\x43\x7d\x9e\x2f\x39\x2c\xbd\x5f\xc9\x56\xd9\x16\x15\xb3\xbe\x70\xb1\xf1\xf6\x4b\x59\x14\x6c\xc4\xb3\xb6\x63\x62\x2d\x04\x00\x19\x6c\x14\x75\xb0\x81\xe8\x47\x12\x62\x3b\xca\x77\x70\xf6\xb2\x41\x83\xef\xd3\x4c\x5a\x3d\x45\xfe\x0d\xc9\x72\x59\xdd\xbf\xe7\x4c\xe6\x20\xbd\x35\x9a\x4c\x64\xdd\x8f\xe9\x12\x3b\x3a\x90\xb2\x8e\x4f\xd3\xcc\x6c\xbb\xa7\xf4\x06\x68\x6c\x07\x69\xe8\xec\x14\x35\x4b\x95\x3b\x67\xa5\x49\x77\x15\x5b\x57\xcf\xe7\xaf\x20\x75\x59\xad\x3e\x67\x27\x63\x58\xa4\x39\x34\xd2\x74\xe1\xad\x4c\x3d\xd7\xa8\x1e\xd0\x53\xed\x2d\x87\x2b\x69\xf6\xe1\xcf\xfb\xa9\x4f\xae\x82\x03\x5b\x37\xc2\x06\xce\x8b\xe3\xc3\x9c\xa4\xad\x7f\xe2\xc3\x72\x59\xae\xd7\x7c\x28\xb6\xca\xf6\xfd\xd4\xc6\x4e\x2a\x3a\x6d\x21\x57\xb6\xcf\x52\x83\x8f\x41\x3e\xb3\xb0\x28\xa6\xed\x34\xfa\xea\xb8\x6b\xb0\xdd\x8f\x8e\xa9\x56\x4c\xc8\x2d\xa6\x0f\x69\x03\x3b\x54\x81\x27\xea\xbc\x7d\x7c\x7a\x9b\xf5\xab\x02\x30\xc4\xe8\xd8\x31\x3b\xfe\x0f\xd3\xe6\x57\x00\x00\x00\xff\xff\xd2\x32\xee\x37\xe5\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1498793240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

