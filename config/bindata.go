// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x5d\x6b\xdb\x30\x14\x7d\xd7\xaf\xb8\xd8\x2f\x1b\x2c\x8e\x63\xb7\xcd\x6a\x08\xa5\x74\x1d\x74\x2c\x1b\xb4\x85\xc1\xc2\x18\xd7\xf6\x8d\xad\x45\x96\x8c\x24\xb7\x69\x7f\xfd\xb8\x72\xfa\x11\xda\x97\x41\x97\x3c\x28\xd2\xb9\x1f\xe7\xdc\x7b\x12\xc3\x99\xe9\xef\xac\x6c\x5a\x0f\xef\xaa\xf7\x90\xa5\xb3\x1c\x26\x7c\x1c\x41\xa9\xb0\xda\x78\xd3\xc3\x17\xe3\xda\x01\x61\x89\x52\xd3\x07\x38\x55\x0a\x2e\x39\xc1\xc1\x25\x39\xb2\x37\x54\x27\x22\x86\x2b\x22\xf8\x7a\x71\x76\xfe\xed\xea\x1c\xd6\xc6\x82\x92\x15\x69\x47\x20\xf5\xda\xd8\x0e\xbd\x34\x3a\x11\x22\x7e\x9b\x8f\x88\x61\x79\xca\xdd\xe0\xcc\xe8\xb5\x6c\x06\x1b\x1a\xc0\xbf\xd7\x79\x23\x3e\xc2\x4b\xaf\x08\x16\x10\x2d\x91\x95\xc3\xe5\xa0\xbd\xec\x68\x9f\x5f\x24\xc4\x0a\x07\xdf\x1a\xfb\x4b\x00\x68\xec\x42\xc6\xc3\x9c\x23\x01\x60\x6c\x83\x5a\xde\x8f\x6a\x1e\xab\x5d\x7c\x67\xac\x94\x86\x9f\x2e\xe0\xcf\xe0\x3c\x28\xb9\x21\x28\x07\xa9\x6a\xa9\x1b\xf0\xad\xd4\x8d\x4b\x38\x2c\x86\xda\x94\xb0\x80\xd9\xf1\xfc\x78\x92\x1e\x4e\xb2\xf9\x75\x3a\x2f\xf2\xac\x48\xd3\x9f\x10\xc3\x67\x69\x9d\x87\x4a\xa1\x73\x50\xa3\x27\x77\x02\x3f\xda\x3b\xd0\xc6\x9f\x08\xb1\xba\xa5\x92\xa9\x0d\x56\x71\xab\x34\x09\xdf\xe2\x63\xca\x85\xb1\xee\xa4\xfe\xbd\x83\x66\xd9\x3c\x80\xb3\x22\xcf\xf3\x9c\x85\x51\x87\x52\x71\x72\x6b\x9c\xe7\x10\xd7\xf9\x3e\xa1\x2d\x76\xbd\xa2\xa4\x32\x1d\xd7\xe8\x8d\x65\x2c\x3b\xe4\x26\x8e\x2c\xc7\xf1\xc9\xb3\x08\x38\xd3\x5a\x40\xc4\xe7\xad\xb1\x35\x17\xae\xd1\x63\x89\x8e\x9e\xcf\xac\x0b\x73\x99\x90\x42\xe7\x65\xc5\x99\xb2\xc3\x66\x6f\x9c\xd3\x1d\xe8\x08\x6d\xd5\x16\x87\x49\xce\x61\xc1\xb0\xa1\xad\x32\x15\x2a\xe6\x1a\x41\x0c\xd7\xad\x74\x20\x5d\x70\xae\x1d\xb4\xe6\x99\x1a\x0d\x9f\x4c\xb5\x21\x1b\x5e\x97\x58\x81\xd4\xce\xa3\x52\x61\x3b\x2e\xd9\xc9\x61\xbe\x2b\x38\xce\xd2\x14\x98\x21\x6f\xdd\x0c\x2c\x72\x96\x0a\x00\xd2\x58\x2a\xaa\x61\x01\xde\x0e\x24\xc4\x6a\x90\xaf\xe8\xd8\xc8\x12\x35\xbe\x2e\x63\xc4\x8a\x31\xf2\x7f\x4a\x38\x38\xc8\x83\x82\x17\x94\x49\xdf\x48\x6b\x74\x47\xda\x33\x6e\x87\x60\xcd\x9a\x6e\x48\x99\x9e\x5f\x47\xdb\xed\xde\x7b\x6b\xea\xa1\x7a\xb0\x7b\x1d\xda\x73\x5a\x87\x55\x2b\x35\x4d\xf6\xa5\x47\xa1\x61\xdd\x1b\xa9\x83\x69\x7c\xd5\x17\xd3\xe9\xa3\xb0\x22\xcb\xe7\x47\xa3\xf9\x75\xed\x9e\xd2\x8a\x69\x87\xea\x16\x2d\x15\xd6\x30\xac\xa4\xde\xb8\x97\xc6\x28\x9e\x19\xe4\xd9\x62\xb2\x54\x88\x95\x32\x4d\x33\x32\x5b\x4b\x45\xfb\xac\x12\x65\x9a\x28\x70\xde\x3a\x79\x4f\x0f\xcb\xec\x70\x3b\x6e\x27\xdf\xdd\x4a\xac\x36\x43\xcf\x8d\xe7\x4c\x82\x59\x87\x7f\xfd\x02\xd6\xa8\x1c\xcf\xae\xb7\x66\x7b\xf7\x34\xd5\x47\x04\xa0\xf5\xbe\xe7\x8e\xd1\xee\xb7\x1b\x2f\x7f\x03\x00\x00\xff\xff\x3d\x15\xaf\xf9\x92\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1426, mode: os.FileMode(420), modTime: time.Unix(1492186698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

