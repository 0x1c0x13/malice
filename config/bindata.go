// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6f\xdb\x30\x0c\xbd\xeb\x57\x10\xce\x65\x03\x56\xc7\xb1\x9b\x35\x33\x90\x43\x51\xf4\xd0\x61\xdd\x80\xf6\x18\x14\x03\x6d\x33\xb6\x10\x7d\x41\x92\xd3\x8f\x5f\x3f\x50\x4e\x3f\x82\xf5\xb0\x01\x55\x0e\x8a\xf8\x48\xbe\xc7\xc7\x64\x06\x17\xd6\x3d\x7a\xd9\x0f\x11\x3e\xb5\x9f\xa1\x2c\x16\x15\x9c\xf0\xb5\x82\x46\x61\xbb\x8b\xd6\xc1\x77\x1b\x86\x11\xe1\x1a\xa5\xa1\x2f\x70\xae\x14\xdc\x70\x41\x80\x1b\x0a\xe4\xf7\xd4\xe5\x62\x06\xb7\x44\xf0\xe3\xea\xe2\xf2\xe7\xed\x25\x6c\xad\x07\x25\x5b\x32\x81\x40\x9a\xad\xf5\x1a\xa3\xb4\x26\x17\x62\xf6\x31\x47\xcc\xe0\xfa\x9c\xd9\xe0\xc2\x9a\xad\xec\x47\x9f\x08\xe0\xff\xfb\x7c\x90\x1e\x11\x65\x54\x04\x6b\xc8\xae\x91\x27\x87\x9b\xd1\x44\xa9\xe9\x58\x5f\x26\xf6\xe4\x03\x0b\x5d\x43\xb6\x2f\xf2\x2a\x5f\x94\x99\x10\x1b\x1c\xe3\x60\xfd\x9d\x00\x30\xa8\x53\x97\x67\xef\x33\x01\x60\x7d\x8f\x46\x3e\x4d\x13\xbe\x30\x5c\xfd\xe2\xca\x7b\x6a\xb8\x6c\xf4\x8a\x91\x22\x4f\x9f\x7a\x55\x70\x1d\x76\x5a\x9a\xdf\x07\x68\x51\x9e\x25\x70\x51\x57\x55\x55\x71\x29\x69\x94\x8a\x8b\x07\x1b\x22\xa7\x04\x1d\x5d\x4e\x0f\xa8\x9d\xa2\xbc\xb5\x9a\x7b\x38\xeb\x19\x2b\x97\x4c\x12\xc8\x73\x1e\xdf\xac\x33\xe1\x18\x02\xc7\xf8\xbe\xb7\xbe\xe3\xc6\x1d\x46\x6c\x30\xd0\xdb\x79\x74\xd2\x7c\x42\x0a\x43\x94\x2d\x57\x4a\x8d\xfd\x1b\x68\x7e\x80\x02\xa1\x6f\x87\x7a\x99\x2f\x39\x29\xfd\xbc\x12\xa9\xb2\x2d\x2a\x56\xfa\xac\x8a\x69\x37\xdf\xca\xa2\x60\x1a\xb6\xda\x8e\x49\x69\x21\x00\xc8\x60\xa3\xa8\x83\x35\x44\x3f\x92\x10\x9b\x51\xbe\x23\x66\x27\x1b\x34\xf8\x9e\x96\x09\xf9\x57\x11\xa7\xa7\xd5\xdd\x7b\xa4\x64\xf6\xd2\x5b\xa3\xc9\x44\xc6\xfd\x98\xb6\xd7\xd1\x9e\x94\x75\x1c\x4d\x66\xd9\x76\x47\x69\xf5\x1a\xdb\x41\x1a\x3a\x39\x56\x99\xa5\xce\x9d\xb3\xd2\xa4\x25\xc5\xd6\xd5\xf3\xf9\x8b\x90\xba\xac\xce\xbe\x66\x47\x0e\x2c\x92\x05\x8d\x34\x5d\x78\x6d\x53\xcf\x35\xaa\x7b\xf4\x54\x7b\xcb\xe9\x4a\x9a\x5d\xf8\x7b\x31\xf5\xd1\x16\x38\xb1\x75\x23\xac\x61\x59\x1c\x0e\xeb\x24\x6d\xfd\x23\x07\xcb\xd3\x72\xb5\xe2\xa0\xd8\x28\xdb\xf7\xd3\x18\x5b\xa9\xe8\x78\x84\x5c\xd9\x3e\x4b\x03\x3e\x04\xf9\xc4\xc0\xa2\x98\x9e\x93\xeb\xd5\xe1\xd5\x60\xbb\x1b\x1d\xab\x3a\x63\x85\x3c\x62\xfa\x0b\xad\x61\x8b\x2a\xb0\xa3\xce\xdb\x87\xc7\x57\xaf\x5f\x10\x80\x21\x46\xc7\x8c\xd9\xe1\x7b\x98\x1e\x7f\x02\x00\x00\xff\xff\xb4\xea\xb8\x59\xdf\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1247, mode: os.FileMode(420), modTime: time.Unix(1532705474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

