// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfa\x14\x84\x73\x79\x1e\x60\x75\x1c\xbb\x59\x3a\x03\x39\x14\x45\x0f\x1d\xd6\x0d\x68\x8f\x41\x31\xd0\x36\x63\x0b\xd1\x1b\x24\x39\x7d\xf9\xf4\x03\xe5\xb4\x5d\xb0\x1c\x36\xa0\xce\x41\x91\xfe\x24\xff\x3f\x52\xf6\x0c\xae\xac\x7b\xf6\xb2\x1f\x22\xfc\xd7\xfe\x0f\x65\xb1\xa8\xe0\x8c\x97\x15\x34\x0a\xdb\x5d\xb4\x0e\xbe\xda\x30\x8c\x08\xb7\x28\x0d\x7d\x82\x4b\xa5\xe0\x8e\x13\x02\xdc\x51\x20\xbf\xa7\x2e\x17\x33\xb8\x27\x82\x6f\x37\x57\xd7\xdf\xef\xaf\x61\x6b\x3d\x28\xd9\x92\x09\x04\xd2\x6c\xad\xd7\x18\xa5\x35\xb9\x10\xb3\x8f\x79\xc4\x0c\x6e\x2f\xd9\x0d\xae\xac\xd9\xca\x7e\xf4\xc9\x00\xfe\xbd\xce\x07\xf1\x88\x28\xa3\x22\x58\x43\x76\x8b\xdc\x39\xdc\x8d\x26\x4a\x4d\xc7\x7c\x99\xd8\x93\x0f\x0c\xba\x86\x6c\x5f\xe4\x55\xbe\xcc\x84\xd8\xe0\x18\x07\xeb\x1f\x04\x80\x41\x9d\x8a\xbc\x8e\x3e\x13\x00\xd6\xf7\x68\xe4\xcb\xd4\xe0\x9b\xc1\xcd\x0f\xce\x7c\xa4\x86\xd3\x46\xaf\x58\x29\xf2\xf4\xab\x2f\x0a\xce\xc3\x4e\x4b\xf3\xf3\x20\x2d\xca\x55\x12\x17\x75\x55\x55\x15\xa7\x92\x46\xa9\x38\x79\xb0\x21\x72\x48\xd0\xd1\xe5\xf4\x84\xda\x29\xca\x5b\xab\xb9\x86\xb3\x9e\xb5\x72\xc9\x26\x81\x3c\xc7\xf1\xca\x9c\x49\xc7\x10\xf8\x8c\xd7\x47\xeb\x3b\x2e\xdc\x61\xc4\x06\x03\xfd\xde\x8f\x4e\xcc\x67\xa4\x30\x44\xd9\x72\xa6\xd4\xd8\x1f\xb5\x3a\x3f\x88\x81\xd0\xb7\x43\xbd\xcc\x2b\x0e\x4b\xef\x57\xb2\x55\xb6\x45\xc5\xac\xaf\x5c\x6c\xbc\xf9\x52\x16\x05\x1b\xf1\xac\xed\x98\x58\x0b\x01\x40\x06\x1b\x45\x1d\xac\x21\xfa\x91\x84\xd8\x8c\xf2\x04\xce\x4e\x36\x68\xf0\x34\xcd\xa4\xd5\x53\xe4\xdf\x90\x9c\x9f\x57\x0f\xa7\x9c\xc9\xec\xa5\xb7\x46\x93\x89\xac\xfb\x31\x5d\x62\x47\x7b\x52\xd6\xf1\x69\x9a\x99\x6d\x77\x94\xde\x00\x8d\xed\x20\x0d\x9d\x1d\xa3\x66\xa9\x72\xe7\xac\x34\xe9\xae\x62\xeb\xea\xf9\xfc\x0d\xa4\x2e\xab\xd5\xe7\xec\x68\x0c\x8b\x34\x87\x46\x9a\x2e\xbc\x97\xa9\xe7\x1a\xd5\x23\x7a\xaa\xbd\xe5\x70\x25\xcd\x2e\xfc\x79\x3f\xf5\xd1\x55\x70\x60\xeb\x46\x58\xc3\xb2\x38\x3c\xcc\x49\xda\xfa\x67\x3e\x2c\xcf\xcb\x8b\x0b\x3e\x14\x1b\x65\xfb\x7e\x6a\x63\x2b\x15\x1d\xb7\x90\x2b\xdb\x67\xa9\xc1\xa7\x20\x5f\x58\x58\x14\xd3\x76\x1a\x7d\x75\xd8\x35\xd8\xee\x46\xc7\x54\x2b\x26\xe4\x16\xd3\x87\xb4\x86\x2d\xaa\xc0\x13\x75\xde\x3e\x3d\xbf\xcf\xfa\x4d\x01\x18\x62\x74\xec\x98\x1d\xfe\x87\x69\xf3\x2b\x00\x00\xff\xff\x30\xb5\xda\x94\xe5\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1497129129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

