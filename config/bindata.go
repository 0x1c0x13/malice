// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfa\x14\x84\x73\x79\x1e\x60\x75\x1c\x3b\x5d\x3a\x03\x39\x14\x45\x0f\x1d\xd6\x0d\x68\x8f\x41\x31\xd0\x36\x63\x0b\xd1\x1b\x24\x39\x7d\xf9\xf4\x03\xe5\xb4\x5d\xb0\x1c\x36\xa0\xce\x41\x91\xfe\x24\xff\x3f\x52\xf6\x0c\xae\xac\x7b\xf6\xb2\x1f\x22\xfc\xd7\xfe\x0f\x65\xb1\xa8\xe0\x8c\x97\x15\x34\x0a\xdb\x5d\xb4\x0e\xbe\xda\x30\x8c\x08\xb7\x28\x0d\x7d\x82\x4b\xa5\xe0\x8e\x13\x02\xdc\x51\x20\xbf\xa7\x2e\x17\x33\xb8\x27\x82\x6f\x37\x57\xd7\xdf\xef\xaf\x61\x6b\x3d\x28\xd9\x92\x09\x04\xd2\x6c\xad\xd7\x18\xa5\x35\xb9\x10\xb3\x8f\x79\xc4\x0c\x6e\x2f\xd9\x0d\xae\xac\xd9\xca\x7e\xf4\xc9\x00\xfe\xbd\xce\x07\xf1\x88\x28\xa3\x22\x58\x43\x76\x8b\xdc\x39\xdc\x8d\x26\x4a\x4d\xc7\x7c\x99\xd8\x93\x0f\x0c\xba\x86\x6c\x5f\xe4\x55\xbe\x28\x32\x21\x36\x38\xc6\xc1\xfa\x07\x01\x60\x50\xa7\x2a\xaf\xb3\xcf\x04\x80\xf5\x3d\x1a\xf9\x32\x75\xf8\xe6\x70\xf3\x83\x33\x1f\xa9\xe1\xb4\xd1\x2b\x56\x8a\x3c\xfd\xea\x8b\x82\xf3\xb0\xd3\xd2\xfc\x3c\x48\x8b\x72\x95\xc4\x45\x5d\x55\x55\xc5\xa9\xa4\x51\x2a\x4e\x1e\x6c\x88\x1c\x12\x74\x74\x39\x3d\xa1\x76\x8a\xf2\xd6\x6a\xae\xe1\xac\x67\xad\x3c\x67\x93\x40\x9e\xe3\x78\x65\xce\xa4\x63\x08\x7c\xc6\xeb\xa3\xf5\x1d\x17\xee\x30\x62\x83\x81\x7e\xef\x47\x27\xe6\x33\x52\x18\xa2\x6c\x39\x53\x6a\xec\x8f\x5a\x9d\x1f\xc4\x40\xe8\xdb\xa1\x3e\xcf\x97\x1c\x96\x5e\xb0\x64\xab\x6c\x8b\x8a\x59\x5f\xb9\xd8\x78\xf3\xa5\x2c\x0a\x36\xe2\x61\xdb\x31\xb1\x16\x02\x80\x0c\x36\x8a\x3a\x58\x43\xf4\x23\x09\xb1\x19\xe5\x09\x9c\x9d\x6c\xd0\xe0\x69\x9a\x49\xab\xa7\xc8\xbf\x21\x59\x2e\xab\x87\x53\xce\x64\xf6\xd2\x5b\xa3\xc9\x44\xd6\xfd\x98\x2e\xb1\xa3\x3d\x29\xeb\xf8\x34\xcd\xcc\xb6\x3b\x4a\x6f\x80\xc6\x76\x90\x86\xce\x8e\x51\xb3\x54\xb9\x73\x56\x9a\x74\x57\xb1\x75\xf5\x7c\xfe\x06\x52\x97\xd5\xea\x73\x76\x34\x86\x45\x9a\x43\x23\x4d\x17\xde\xcb\xd4\x73\x8d\xea\x11\x3d\xd5\xde\x72\xb8\x92\x66\x17\xfe\xbc\x9f\xfa\xe8\x2a\x38\xb0\x75\x23\xac\xe1\xbc\x38\x3c\xcc\x49\xda\xfa\x67\x3e\x2c\x97\xe5\xc5\x05\x1f\x8a\x8d\xb2\x7d\x3f\xb5\xb1\x95\x8a\x8e\x5b\xc8\x95\xed\xb3\xd4\xe0\x53\x90\x2f\x2c\x2c\x8a\x69\x3b\x8d\xbe\x3a\xec\x1a\x6c\x77\xa3\x63\xaa\x15\x13\x72\x8b\xe9\x4b\x5a\xc3\x16\x55\xe0\x89\x3a\x6f\x9f\x9e\xdf\x67\xfd\xa6\x00\x0c\x31\x3a\x76\xcc\x0e\xff\xc3\xb4\xf9\x15\x00\x00\xff\xff\xd3\x65\x88\x72\xe6\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1254, mode: os.FileMode(420), modTime: time.Unix(1499634039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

