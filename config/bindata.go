// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x6d\x6b\xdb\x30\x10\xfe\xee\x5f\x71\x38\x30\x36\x58\x1c\xc7\xa1\xcd\x6a\x28\xa5\x74\xdd\x1b\xcd\x06\x6d\x61\xb0\xae\x0c\xd9\xba\xd8\x22\xb2\x64\x24\xb9\x6f\xbf\x7e\x77\x72\x9a\x2e\x1f\x07\x75\x02\xf2\xdd\xa3\xbb\x7b\xee\xb9\xf3\x04\xce\x6c\xff\xe8\x54\xd3\x06\x78\x5b\xbf\x83\x22\x9f\x2f\x60\xca\xc7\x21\x54\x5a\xd4\x9b\x60\x7b\xf8\x66\x7d\x3b\x08\x58\x09\x65\xf0\x3d\x9c\x6a\x0d\x97\x1c\xe0\xe1\x12\x3d\xba\x3b\x94\x59\x32\x81\x2b\x44\xb8\xf8\x7a\x76\xfe\xfd\xea\x1c\xd6\xd6\x81\x56\x35\x1a\x8f\xa0\x0c\x59\x9d\x08\xca\x9a\x2c\x49\x26\xaf\xf3\x50\xbd\xd5\x29\x57\x23\xfa\x66\xad\x9a\xc1\xc5\x02\xf0\xff\x79\x5e\x89\x4f\x12\x54\xd0\x08\xc7\x90\xae\x04\x77\x0e\x97\x83\x09\xaa\xc3\x7d\x7e\x69\x92\xdc\x88\x21\xb4\xd6\xdd\x26\x00\x46\x74\x31\xe2\x59\xe7\x94\x7c\x13\xb0\xae\x11\x46\x3d\x8d\xfd\x10\xfa\x59\x85\x2f\x43\x35\x62\x95\xb2\x2f\x2e\x4a\xbd\xb6\x83\x91\xe8\xe0\x0d\x9c\x9d\xff\xf8\x6d\x2e\xd4\x06\x3d\x04\x11\xc8\x15\x2c\xcd\x47\x18\x09\x15\xa2\xcb\xc6\x70\x69\x2b\x0a\x9f\x1f\x2d\x8f\xa6\xf9\xc1\xb4\x58\x5e\xe7\xcb\x72\x51\x94\x79\xfe\x8b\xc0\x4f\xca\xf9\x00\xb5\x16\xde\x83\xa4\x14\xfe\x04\x7e\xb6\x8f\x60\x6c\x38\x21\xd6\xf7\x58\x31\xe5\xc1\x69\x26\x90\x67\xf1\x57\x7e\xc8\x39\xb1\x90\x9d\x32\x7f\xb6\xd0\xbc\x58\x46\x70\x5e\x2e\xe8\xe1\x86\xb1\x13\x4a\x73\x70\x6b\xa9\x00\x5d\xf1\x5d\xe8\x33\x7c\x10\x5d\xaf\x31\xab\x6d\xc7\x39\x7a\xeb\x18\x2b\x0e\xb8\x08\x2d\x15\xdf\xe3\x93\x35\x8a\x38\xd3\x22\x1f\x9f\xf7\xd6\x49\x4e\x4c\x2c\x45\x25\x3c\xfe\xab\x65\x17\xd5\x9f\xa2\xde\x70\x94\xea\x44\xb3\x27\xf1\x6c\x0b\xc4\xb5\x8d\x45\xb4\xad\x85\x66\x66\x29\x69\x70\xdd\x2a\x0f\xf4\xe7\xfd\x75\x83\x31\xca\x34\x40\x53\xf8\x68\xeb\x0d\xdd\x66\xef\x4a\xd4\xb4\xd1\x3e\x08\xad\xe3\x84\x7c\xb6\x25\xcf\xec\x6e\xe0\xa8\xc8\x73\x60\x3e\x3c\x7b\x3b\x70\x4b\xf3\x9c\x4c\x34\xa2\xd2\x28\xc9\x0c\x6e\x40\x16\xc5\xdc\x29\x67\x4d\x87\x26\xf0\x75\x2a\xc6\x64\x24\xde\xa1\xb6\x3d\x7b\xc7\x89\x6d\xfd\xbd\xb3\x72\xa8\x9f\x37\x48\x46\x3a\x1c\xd6\x89\xba\xa5\x6f\x72\xba\xdf\x7d\x1a\x0b\xca\xde\x2a\x13\xf5\x0e\x75\x5f\xce\x66\xbb\x46\xcb\x62\xb1\x3c\xe4\x3b\x95\x32\xd2\xbf\x84\x95\x33\x3a\xef\x85\xc3\xd2\x59\x86\xb5\x32\x1b\xbf\xaf\x69\x89\xb4\x1e\x41\xd5\xe9\x7e\x87\x45\x4e\xac\xb4\x6d\x9a\x91\xd5\x5a\x69\xdc\x67\x94\x11\x98\x46\xbe\x0f\x5e\x3d\xe1\xb3\x2a\x64\x8e\xf3\x59\x6c\xad\x8a\xa6\x34\xf4\x5c\x74\xc9\x04\x98\x71\xfc\x88\x8e\x61\x2d\xb4\x67\xdd\x48\x89\x87\xc7\xdb\x9d\xa2\x3b\x84\xb6\x2b\x84\x9e\x2b\xa6\xdb\x77\x3f\x1a\x7f\x03\x00\x00\xff\xff\x0d\xad\xf6\x60\xe1\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1249, mode: os.FileMode(420), modTime: time.Unix(1476572029, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

