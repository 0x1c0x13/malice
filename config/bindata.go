// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfa\x14\x84\x73\x79\x1e\x60\x75\x1c\xbb\x5d\x3a\x03\x39\x14\x45\x0f\x1d\xd6\x0d\x68\x8f\x41\x31\xd0\x36\x63\x0b\xd1\x1b\x24\x39\x7d\xf9\xf4\x03\xe5\xb4\x9d\xb1\x1e\x36\xa0\xce\x41\x91\xfe\x24\xff\x3f\x52\xf6\x02\x2e\xad\x7b\xf2\xb2\x1f\x22\xfc\xd7\xfe\x0f\x65\xb1\xaa\xe0\x84\x97\x35\x34\x0a\xdb\x7d\xb4\x0e\xbe\xda\x30\x8c\x08\x37\x28\x0d\x7d\x82\x0b\xa5\xe0\x96\x13\x02\xdc\x52\x20\x7f\xa0\x2e\x17\x0b\xb8\x23\x82\x6f\xd7\x97\x57\xdf\xef\xae\x60\x67\x3d\x28\xd9\x92\x09\x04\xd2\xec\xac\xd7\x18\xa5\x35\xb9\x10\x8b\x8f\x79\xc4\x02\x6e\x2e\xd8\x0d\x2e\xad\xd9\xc9\x7e\xf4\xc9\x00\xfe\xbd\xce\x07\xf1\x88\x28\xa3\x22\xd8\x40\x76\x83\xdc\x39\xdc\x8e\x26\x4a\x4d\x73\xbe\x4c\x1c\xc8\x07\x06\xdd\x40\x76\x28\xf2\x2a\x5f\x67\x42\x6c\x71\x8c\x83\xf5\xf7\x02\xc0\xa0\x4e\x45\x5e\x46\x9f\x09\x00\xeb\x7b\x34\xf2\x79\x6a\xf0\xd5\xe0\xfa\x07\x67\x3e\x50\xc3\x69\xa3\x57\xac\x14\x79\xfa\xd5\xe7\x05\xe7\x61\xa7\xa5\xf9\x79\x94\x56\xe5\x3a\x89\xab\xba\xaa\xaa\x8a\x53\x49\xa3\x54\x9c\x3c\xd8\x10\x39\x24\xe8\xe8\x72\x7a\x44\xed\x14\xe5\xad\xd5\x5c\xc3\x59\xcf\x5a\x79\xc6\x26\x81\x3c\xc7\xf1\xca\x9c\x49\xc7\x10\xf8\x8c\xd7\x07\xeb\x3b\x2e\xdc\x61\xc4\x06\x03\xfd\xde\x8f\x4e\xcc\x27\xa4\x30\x44\xd9\x72\xa6\xd4\xd8\xcf\x5a\x5d\x1e\xc5\x40\xe8\xdb\xa1\x3e\xcb\x2b\x0e\x4b\xef\x57\xb2\x55\xb6\x45\xc5\xac\x2f\x5c\x6c\xbc\xfd\x52\x16\x05\x1b\xf1\xac\xed\x98\x58\x0b\x01\x40\x06\x1b\x45\x1d\x6c\x20\xfa\x91\x84\xd8\x8e\xf2\x1d\x9c\xbd\x6c\xd0\xe0\xfb\x34\x93\x56\x4f\x91\x7f\x43\x72\x7a\x5a\xdd\xbf\xe7\x4c\xe6\x20\xbd\x35\x9a\x4c\x64\xdd\x8f\xe9\x12\x3b\x3a\x90\xb2\x8e\x4f\xd3\xcc\x6c\xbb\xa7\xf4\x06\x68\x6c\x07\x69\xe8\x64\x8e\x9a\xa5\xca\x9d\xb3\xd2\xa4\xbb\x8a\xad\xab\x97\xcb\x57\x90\xba\xac\xd6\x9f\xb3\xd9\x18\x56\x69\x0e\x8d\x34\x5d\x78\x2b\x53\x2f\x35\xaa\x07\xf4\x54\x7b\xcb\xe1\x4a\x9a\x7d\xf8\xf3\x7e\xea\xd9\x55\x70\x60\xeb\x46\xd8\xc0\x59\x71\x7c\x98\x93\xb4\xf5\x4f\x7c\x58\x9e\x96\xe7\xe7\x7c\x28\xb6\xca\xf6\xfd\xd4\xc6\x4e\x2a\x9a\xb7\x90\x2b\xdb\x67\xa9\xc1\xc7\x20\x9f\x59\x58\x15\xd3\x76\x1a\x7d\x75\xdc\x35\xd8\xee\x47\xc7\x54\x6b\x26\xe4\x16\xd3\x87\xb4\x81\x1d\xaa\xc0\x13\x75\xde\x3e\x3e\xbd\xcd\xfa\x55\x01\x18\x62\x74\xec\x98\x1d\xff\x87\x69\xf3\x2b\x00\x00\xff\xff\x37\x15\xca\x88\xe5\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1498702419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

