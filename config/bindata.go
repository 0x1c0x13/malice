// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xdb\x4c\x0c\xbc\xef\x53\x10\x32\x3e\xe0\x2b\xd0\xc8\xb2\x14\x27\xa9\x00\x1f\x52\x37\x87\x14\x75\x5b\x24\xed\xc9\x28\x0a\x4a\xa2\xa5\xad\x57\xbb\xc2\xfe\x38\x3f\x4f\x5f\x70\xe5\x24\x35\x92\x4b\x81\x54\x3e\xac\xb5\x43\x72\x66\x48\x42\x13\x58\x9a\xe1\xce\xca\xb6\xf3\xf0\x7f\xfd\x06\xf2\x6c\x56\xc0\x11\x1f\x27\x50\x29\xac\xb7\xde\x0c\xf0\xd1\xb8\x2e\x20\xac\x50\x6a\x7a\x0b\xe7\x4a\xc1\x15\x27\x38\xb8\x22\x47\x76\x47\x4d\x2a\x26\x70\x4d\x04\x9f\x2e\x97\x17\x9f\xaf\x2f\x60\x63\x2c\x28\x59\x93\x76\x04\x52\x6f\x8c\xed\xd1\x4b\xa3\x53\x21\x26\xaf\xf3\x88\x09\xac\xce\x99\x0d\x96\x46\x6f\x64\x1b\x6c\x24\x80\xbf\xaf\xf3\x4a\x7a\x84\x97\x5e\x11\x2c\x20\x59\x21\x3b\x87\xab\xa0\xbd\xec\xe9\x50\x5f\x22\x76\x64\x1d\x0b\x5d\x40\xb2\xcb\xd2\x22\xcd\x12\x21\xd6\x18\x7c\x67\xec\x0f\x01\xa0\xb1\x8f\x45\x1e\x5a\x9f\x08\x00\x63\x5b\xd4\xf2\x7e\x34\xf8\x48\x70\xf9\x85\xb1\x4a\x1a\xbe\xba\x84\x5f\xc1\x79\x50\x72\x4b\x50\x05\xa9\x1a\xa9\x5b\xf0\x9d\xd4\xad\x4b\x99\xe0\x86\x2a\xae\x1e\xac\xe2\xe8\x2c\x8d\xbf\xf2\x2c\xe3\x12\xd8\xf4\x52\xff\xdc\x43\xb3\xfc\x34\x82\xb3\xb2\x28\x8a\x82\x53\xa9\x47\xa9\x38\xb9\x33\xce\x73\x88\xeb\xfd\x90\xd2\x2d\xf6\x83\xa2\xb4\x36\x3d\xd7\x18\x8c\x65\x2c\x9f\x33\x89\x23\xcb\x71\x7c\xb2\x9d\x88\xa3\x73\x7c\xc7\xe7\x8d\xb1\x0d\x17\x6e\xd0\x63\x85\x8e\xfe\xb4\xdd\x47\x6b\x47\xa4\xd0\x79\x59\x73\xa6\xec\xb1\x3d\xe8\xc8\x74\x0f\x3a\x42\x5b\x77\xe5\x3c\x2d\x38\x2c\xae\x61\xa4\x55\xa6\x46\xc5\x5a\x13\x98\xc0\xb7\x4e\x3a\x90\x2e\xee\xa3\x0d\x5a\x73\x5b\x8c\x86\x0f\xa6\xde\x92\x8d\xb7\x2b\xac\x41\x6a\xe7\x51\xa9\xd8\x60\x97\xee\xed\xb0\xde\x35\xbc\xcb\xb3\x0c\x58\x21\xcf\xd2\x84\x68\x32\x13\x00\xa4\xb1\x52\xd4\xc0\x02\xbc\x0d\x24\xc4\x3a\xc8\x17\x7c\x6c\x65\x85\x1a\x5f\xb6\x31\x62\xe5\x18\xf9\x2f\x2d\x1c\x1f\x17\xd1\xc1\x33\xc9\xa4\x77\xd2\x1a\xdd\x93\xf6\x8c\xdb\x10\xb7\xab\xa1\x1d\x29\x33\xf0\x2d\xab\x9a\x3c\xdc\x0f\xd6\x34\xa1\x1e\x97\x58\xac\x9b\x48\xcf\x69\x3d\xd6\x9d\xd4\x74\x74\x68\x3d\x89\x84\xcd\x60\xa4\x8e\x4b\xe3\xeb\xa1\x9c\x4e\x1f\x8d\x95\x79\x71\x7a\x32\xee\xaf\x6e\xdc\x53\x5a\x39\xed\x51\xdd\xa0\xa5\xd2\x1a\x86\x95\xd4\x5b\xf7\x7c\x31\xca\x83\x1d\xe0\xc0\x7a\x08\xb0\x80\x79\xb6\x7f\x60\x02\xf3\xec\x3f\x30\x1b\xc0\x1d\x4a\x55\x29\x82\xe5\xd7\xef\xac\x96\x7a\x63\xef\x38\x34\x3f\xce\xcf\xce\x1e\x42\xb3\xd5\xfb\x83\x19\xcf\xf2\x0c\x40\x88\xb5\x32\x6d\x3b\xda\xdc\x48\x45\x87\x16\x53\x65\xda\x24\x36\xe0\xd6\xc9\x7b\x06\x66\xd9\xf8\x3a\x8e\xba\xd8\xbf\x55\x58\x6f\xc3\xc0\x2e\x4e\xd9\x11\xb7\x20\x7e\x18\x16\xb0\x41\xe5\x78\x10\x83\x35\xb7\x77\x4f\x23\x7a\x44\x00\x3a\xef\x07\x66\x4c\xf6\xff\x63\x2f\x92\xdf\x01\x00\x00\xff\xff\xa8\x1b\x7f\x20\xb4\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1460, mode: os.FileMode(420), modTime: time.Unix(1492811924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

