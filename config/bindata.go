// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x6d\x6b\xdb\x30\x10\xfe\xee\x5f\x71\x38\x30\x36\x58\x5c\xc7\xa1\xcd\x6a\x28\xa5\x74\xdd\x1b\xcd\x06\x6d\x61\xb0\xae\x0c\xd9\xbe\xd8\x22\xb2\xce\x48\x72\xdf\x7e\xfd\xee\x94\xb4\x5d\x3e\x0e\xea\x04\xe4\x7b\x7d\x9e\x7b\x74\x9e\xc0\x29\x0d\x0f\x4e\xb7\x5d\x80\xb7\xf5\x3b\x28\xf2\xd9\x1c\xa6\x72\x1c\x40\x65\x54\xbd\x0e\x34\xc0\x37\xf2\xdd\xa8\x60\xa9\xb4\xc5\xf7\x70\x62\x0c\x5c\x48\x81\x87\x0b\xf4\xe8\x6e\xb1\xc9\x92\x09\x5c\x22\xc2\xf9\xd7\xd3\xb3\xef\x97\x67\xb0\x22\x07\x46\xd7\x68\x3d\x82\xb6\x6c\xf5\x2a\x68\xb2\x59\x92\x4c\x5e\xe7\x61\xbc\xe5\x89\xa0\x31\x7d\xbb\xd2\xed\xe8\x22\x00\xfc\x7f\x9f\x57\xe2\x93\x04\x1d\x0c\xc2\x11\xa4\x4b\x25\x93\xc3\xc5\x68\x83\xee\x71\x97\x5f\x9a\x24\xd7\x6a\x0c\x1d\xb9\x9b\x04\xc0\xaa\x3e\x56\x3c\xe9\x9c\xb2\x6f\x02\xe4\x5a\x65\xf5\xe3\x66\x1e\x8e\x7e\xd6\xe1\xcb\x58\x6d\x62\x95\xa6\x17\x17\xb7\x5e\xd1\x68\x1b\x74\xf0\x06\x4e\xcf\x7e\xfc\xb6\xe7\x7a\x8d\x1e\x82\x0a\xec\x0a\xc4\xf7\xa3\x6c\x03\x15\xa2\xcb\x36\xe5\x0d\x55\x5c\x3e\x3b\x5c\x1c\x4e\xf3\xfd\x69\xb1\xb8\xca\x17\xe5\xbc\x28\xf3\xfc\x17\x07\x3f\x69\xe7\x03\xd4\x46\x79\x0f\x0d\xb7\xf0\xc7\xf0\xb3\x7b\x00\x4b\xe1\x98\x59\xdf\x61\x25\x94\x47\x67\x84\x40\x9e\xc5\x5f\xf9\x21\x97\xc6\xaa\xe9\xb5\xfd\xb3\x0d\xcd\x8a\x45\x0c\xce\xca\x39\x3f\x32\x30\xf6\x4a\x1b\x29\xee\x88\x01\x38\xc5\xf7\x61\xc8\xf0\x5e\xf5\x83\xc1\xac\xa6\x5e\x7a\x0c\xe4\x24\x56\xec\x0b\x08\x2f\x95\xe4\xc9\x29\x1a\xc5\xb8\xd0\x62\x9f\x9c\x77\xe4\x1a\x69\xcc\x2c\x55\xa5\x3c\xfe\xab\x65\x1f\xd5\x9f\xa2\x59\x4b\x55\xdc\xce\xd8\xcb\x50\xad\x8c\x10\x48\x79\xd4\xab\x4e\x7b\xe0\xbf\xac\xa9\x1b\xad\xd5\xb6\x05\x16\xfb\x23\xd5\x6b\xce\x16\xef\x52\xd5\xbc\xb8\x3e\x28\x63\xe2\x45\xf8\x6c\xcb\x51\x48\x5c\xc3\x61\x91\xe7\x20\xb0\x72\xc5\x34\x0a\xf3\x59\xce\x26\x5a\x55\x19\x6c\xd8\x0c\x6e\x44\x99\xdd\xde\x6a\x47\xb6\x47\x1b\x24\x9d\xc1\x84\x4c\x83\xb7\x68\x68\x10\xef\xe6\x62\xb6\xfe\xc1\x51\x33\xd6\x4f\x8b\xd2\x44\x3a\x52\xd6\xab\xba\xe3\x4f\x6f\xba\x3b\x64\x1a\x01\x9b\x81\xb4\x8d\xb2\x86\x7a\x28\xf7\xf6\x9e\x07\x2d\x8b\xf9\xe2\x40\x72\x2a\x6d\x1b\xff\x52\x56\xee\xf1\x79\xa7\x1c\x96\x8e\x24\x6c\xb4\x5d\xfb\x5d\xe9\x4a\xe4\x2d\x08\xba\x4e\x77\x27\x2c\x72\x66\x65\xa8\x6d\x37\xac\x56\xda\xe0\x2e\xa3\x8c\x83\x69\xe4\x7b\xef\xf5\x23\x3e\xa9\xc2\xa6\x6a\xc5\x9a\x6f\xad\x8a\xf7\x7d\x1c\x04\x74\x21\x04\x84\x71\xfc\x56\x8e\x60\xa5\x8c\x17\xdd\x58\x89\xfb\x87\x9b\x67\x45\x9f\x23\xbc\x44\x21\x0c\x82\x98\x6e\xdf\xfd\xc6\xf8\x1b\x00\x00\xff\xff\xab\x0d\x6e\xb6\xc8\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1224, mode: os.FileMode(420), modTime: time.Unix(1475368774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

