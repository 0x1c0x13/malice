// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x5f\x6b\xfb\x36\x14\x7d\xd7\xa7\xb8\x38\x2f\x1b\x2c\x8e\x63\xb7\xcd\x6a\x08\xa5\x74\x1d\x74\x2c\x1b\xb4\x85\xc1\xc2\x18\xd7\xf6\x8d\x7d\x17\x59\x32\x92\xdc\x7f\x9f\x7e\x5c\x39\x6d\x17\xda\x97\x41\x7f\xc9\x83\x22\x1d\xdd\x7b\xce\xb9\x3a\x99\xc1\x95\x1d\x9e\x1d\xb7\x5d\x80\xef\xea\xef\x21\xcf\x96\x05\xcc\x65\x39\x83\x4a\x63\xbd\x0f\x76\x80\x5f\xac\xef\x46\x84\x0d\xb2\xa1\x1f\xe0\x52\x6b\xb8\x95\x02\x0f\xb7\xe4\xc9\x3d\x50\x93\xaa\x19\xdc\x11\xc1\xaf\x37\x57\xd7\xbf\xdd\x5d\xc3\xce\x3a\xd0\x5c\x93\xf1\x04\x6c\x76\xd6\xf5\x18\xd8\x9a\x54\xa9\xd9\xd7\x7c\xd4\x0c\x36\x97\xc2\x06\x57\xd6\xec\xb8\x1d\x5d\x24\x80\xff\xdf\xe7\x8b\xf4\xa8\xc0\x41\x13\xac\x21\xd9\xa0\x38\x87\xdb\xd1\x04\xee\xe9\x58\x5f\xa2\xd4\x16\xc7\xd0\x59\xf7\x97\x02\x30\xd8\xc7\x8a\xd7\x39\x27\x0a\xc0\xba\x16\x0d\xbf\x4c\x6e\xde\xba\xdd\xfc\x2e\x58\xc5\x56\x8e\x6e\xe0\x9f\xd1\x07\xd0\xbc\x27\xa8\x46\xd6\x0d\x9b\x16\x42\xc7\xa6\xf5\xa9\x5c\x9b\x41\x63\x2b\x58\xc3\xf2\x7c\x75\x3e\xcf\x4e\xe7\xf9\xea\x3e\x5b\x95\x45\x5e\x66\xd9\x9f\x30\x83\x9f\xd9\xf9\x00\xb5\x46\xef\xa1\xc1\x40\xfe\x02\xfe\xe8\x9e\xc1\xd8\x70\xa1\xd4\xf6\x91\x2a\x91\x36\x3a\x2d\x54\x59\x1a\xbf\xe5\x8f\x99\x34\xc6\xa6\x67\xf3\xf7\x01\x5a\xe6\xab\x08\x2e\xcb\xa2\x28\x0a\x31\x46\x3d\xb2\x96\xe2\xce\xfa\x20\x57\x7c\x1f\x86\x94\x9e\xb0\x1f\x34\xa5\xb5\xed\xa5\xc7\x60\x9d\x60\xf9\xa9\x90\x78\x72\x72\x4f\x56\x99\x45\xc4\x45\xd6\x1a\x12\x59\x1f\xad\x6b\xa4\x71\x83\x01\x2b\xf4\xf4\xdf\x99\xf5\x71\x2e\x73\xd2\xe8\x03\xd7\x52\xc9\x3d\xb6\x47\xe3\x5c\x1c\x40\x4f\xe8\xea\xae\x3c\x4d\x0b\xb9\x16\x03\x1b\x69\xb5\xad\x51\x8b\xd6\x04\x66\x70\xdf\xb1\x07\xf6\x31\xb9\x6e\x34\x46\x66\x6a\x0d\xfc\x64\xeb\x3d\xb9\x78\xba\xc1\x1a\xd8\xf8\x80\x5a\xc7\xd7\xf1\xe9\xc1\x8e\xe8\xdd\xc2\x79\x9e\x65\x20\x0a\xe5\xd5\xed\x18\x4d\x66\x0a\x80\x0c\x56\x9a\x1a\x58\x43\x70\x23\x29\xb5\x1d\xf9\x13\x1f\x7b\xae\xd0\xe0\xe7\x36\x26\xac\x9c\x6e\x7e\x4b\x0b\x27\x27\x45\x74\xf0\x41\x32\x99\x07\x76\xd6\xf4\x64\x82\xe0\x6e\x8c\xd1\x6c\xe8\x81\xb4\x1d\xe4\x74\x8a\xdd\xe1\x7c\x70\xb6\x19\xeb\xd7\xb8\x37\x91\x5e\xca\x7a\xac\x3b\x36\x34\x3f\xb6\x9e\x44\xc2\x66\xb0\x6c\x62\x68\x42\x3d\x94\x8b\xc5\x9b\xb1\x32\x2f\x56\x67\x53\xf8\x4d\xe3\xdf\xcb\xca\x45\x8f\xfa\x11\x1d\x95\xce\x0a\xac\xd9\xec\xfd\xc7\x60\x94\x47\x19\x48\x8e\x9e\x67\x99\x67\x4a\x6d\xb5\x6d\xdb\x49\xdf\x8e\x35\x1d\x6b\x4b\xb5\x6d\x93\xa8\xfc\xc9\xf3\x8b\x00\xcb\x6c\xda\x4e\x6f\x54\x1c\x76\x15\xd6\xfb\x71\x10\xfa\x95\x48\x11\xed\xf1\xbf\xbf\x86\x1d\x6a\x2f\x13\x1c\x9c\x7d\x7a\x7e\x9f\xed\x1b\x02\xd0\x85\x30\x08\x63\x72\xf8\xed\xa7\xcd\xbf\x01\x00\x00\xff\xff\x47\x1b\xa3\x6a\x98\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1432, mode: os.FileMode(420), modTime: time.Unix(1492289102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

