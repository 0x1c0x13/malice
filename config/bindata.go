// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6f\xdb\x3c\x0c\xc6\xef\xfa\x14\x84\x73\x79\x5f\x60\x75\x1c\xbb\x5d\x3a\x03\x39\x14\x45\x0f\x1d\xd6\x0d\x68\x8f\x41\x31\xd0\x36\x63\x0b\x91\x44\x43\x92\xd3\x3f\x9f\x7e\xa0\x92\xb6\x0b\xd6\xc3\x06\xd4\x39\x28\xd2\x43\xf2\xf9\x91\xb2\x67\x70\xc9\xe3\x93\xd7\xfd\x10\xe1\xbf\xf6\x7f\x28\x8b\x45\x05\x27\xb2\x2c\xa1\x31\xd8\x6e\x23\x8f\xf0\x95\xc3\x30\x21\xdc\xa0\x76\xf4\x09\x2e\x8c\x81\x5b\x49\x08\x70\x4b\x81\xfc\x8e\xba\x5c\xcd\xe0\x8e\x08\xbe\x5d\x5f\x5e\x7d\xbf\xbb\x82\x0d\x7b\x30\xba\x25\x17\x08\xb4\xdb\xb0\xb7\x18\x35\xbb\x5c\xa9\xd9\xc7\x3c\x6a\x06\x37\x17\xe2\x06\x97\xec\x36\xba\x9f\x7c\x32\x80\x7f\xaf\xf3\x41\x3c\x2a\xea\x68\x08\x56\x90\xdd\xa0\x74\x0e\xb7\x93\x8b\xda\xd2\x31\x5f\xa6\x76\xe4\x83\x80\xae\x20\xdb\x15\x79\x95\x2f\x32\xa5\xd6\x38\xc5\x81\xfd\xbd\x02\x70\x68\x53\x91\x97\xd1\x67\x0a\x80\x7d\x8f\x4e\x3f\xef\x1b\x7c\x35\xb8\xfe\x21\x99\x0f\xd4\x48\xda\xe4\x8d\x28\x45\x9e\x7e\xf5\x79\x21\x79\xd8\x59\xed\x7e\x1e\xa4\x45\xb9\x4c\xe2\xa2\xae\xaa\xaa\x92\x54\xb2\xa8\x8d\x24\x0f\x1c\xa2\x84\x04\x1b\xc7\x9c\x1e\xd1\x8e\x86\xf2\x96\xad\xd4\x18\xd9\x8b\x56\x9e\x89\x49\x20\x2f\x71\xb2\x0a\x67\xd2\x31\x04\x39\x93\xf5\x81\x7d\x27\x85\x3b\x8c\xd8\x60\xa0\xdf\xfb\xb1\x89\xf9\x84\x0c\x86\xa8\x5b\xc9\xd4\x16\xfb\xa3\x56\xe7\x07\x31\x10\xfa\x76\xa8\xcf\xf2\x4a\xc2\xd2\xfb\x95\x6c\x0d\xb7\x68\x84\xf5\x85\x4b\x8c\xd7\x5f\xca\xa2\x10\x23\x99\x35\x4f\x89\xb5\x50\x00\xe4\xb0\x31\xd4\xc1\x0a\xa2\x9f\x48\xa9\xf5\xa4\xdf\xc1\xd9\xea\x06\x1d\xbe\x4f\xb3\xd7\xea\x7d\xe4\xdf\x90\x9c\x9e\x56\xf7\xef\x39\x93\xdb\x69\xcf\xce\x92\x8b\xa2\xfb\x29\x5d\x62\x47\x3b\x32\x3c\xca\x69\x9a\x19\xb7\x5b\x4a\x6f\x80\xc5\x76\xd0\x8e\x4e\x8e\x51\xb3\x54\xb9\x1b\x59\xbb\x74\x57\xb1\x1d\xeb\xf9\xfc\x15\xa4\x2e\xab\xe5\xe7\xec\x68\x0c\x8b\x34\x87\x46\xbb\x2e\xbc\x95\xa9\xe7\x16\xcd\x03\x7a\xaa\x3d\x4b\xb8\xd1\x6e\x1b\xfe\xbc\x9f\xfa\xe8\x2a\x24\xb0\x1d\x27\x58\xc1\x59\x71\x78\x84\x93\x2c\xfb\x27\x39\x2c\x4f\xcb\xf3\x73\x39\x54\x6b\xc3\x7d\xbf\x6f\x63\xa3\x0d\x1d\xb7\x90\x1b\xee\xb3\xd4\xe0\x63\xd0\xcf\x22\x2c\x8a\xfd\x76\x3f\xfa\xea\xb0\x6b\xb0\xdd\x4e\xa3\x50\x2d\x85\x50\x5a\x4c\x1f\xd2\x0a\x36\x68\x82\x4c\x74\xf4\xfc\xf8\xf4\x36\xeb\x57\x05\x60\x88\x71\x14\xc7\xec\xf0\x3f\xbc\x6c\x7e\x05\x00\x00\xff\xff\x80\xa7\x21\x63\xe7\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1255, mode: os.FileMode(420), modTime: time.Unix(1492815720, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

