// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x6f\x6b\xfb\x36\x10\x7e\xaf\x4f\x71\xd8\x0c\x36\x58\x1c\xc7\x6e\x9a\xd6\x10\x4a\x97\x75\xd0\xb1\x6c\xa3\xed\x18\x2c\x8c\x71\xb6\x2f\xb6\x16\x59\x32\x92\x9c\x36\xfd\xf4\xe3\xe4\xb4\x5d\x68\xdf\xfc\xa0\x3f\xf7\x85\x2a\x3d\xf7\xe7\x79\xee\x1e\x12\xc3\xca\xf4\x07\x2b\x9b\xd6\xc3\xb7\xd5\x77\x90\xa5\xb3\x1c\x26\x7c\x9c\x43\xa9\xb0\xda\x79\xd3\xc3\xcf\xc6\xb5\x03\xc2\x1a\xa5\xa6\xef\xe1\x5a\x29\xb8\xe3\x04\x07\x77\xe4\xc8\xee\xa9\x4e\x44\x0c\xf7\x44\xf0\xcb\xed\xea\xe6\xd7\xfb\x1b\xd8\x1a\x0b\x4a\x56\xa4\x1d\x81\xd4\x5b\x63\x3b\xf4\xd2\xe8\x44\x88\xf8\x73\x3e\x11\xc3\xfa\x9a\xbb\xc1\xca\xe8\xad\x6c\x06\x1b\x1a\xc0\x97\xd7\xf9\x24\x3e\xc2\x4b\xaf\x08\x96\x10\xad\x91\x95\xc3\xdd\xa0\xbd\xec\xe8\x94\x5f\x24\xc4\x06\x07\xdf\x1a\xfb\xb7\x00\xd0\xd8\x85\x8c\x97\x39\x47\x02\xc0\xd8\x06\xb5\x7c\x1e\xd5\xbc\x56\xbb\xfd\x8d\xb1\x52\x1a\x7e\xba\x85\x7f\x07\xe7\x41\xc9\x1d\x41\x39\x48\x55\x4b\xdd\x80\x6f\xa5\x6e\x5c\xc2\x61\x31\xd4\xa6\x84\x25\xcc\x2e\x17\x97\x93\x74\x3e\xc9\x16\x0f\xe9\xa2\xc8\xb3\x22\x4d\xff\x82\x18\x7e\x92\xd6\x79\xa8\x14\x3a\x07\x35\x7a\x72\x57\xf0\x67\x7b\x00\x6d\xfc\x95\x10\x9b\x47\x2a\x99\xda\x60\x15\xb7\x4a\x93\xf0\x57\x5c\xa4\x5c\x18\xeb\x4e\xea\x7f\x8e\xd0\x2c\x5b\x04\x70\x56\xe4\x79\x9e\xb3\x30\xea\x50\x2a\x4e\x6e\x8d\xf3\x1c\xe2\x3a\xdf\x27\xf4\x84\x5d\xaf\x28\xa9\x4c\xc7\x35\x7a\x63\x19\xcb\xe6\xdc\xc4\x91\xe5\x38\x3e\x79\x16\x01\x67\x5a\x4b\x88\xf8\x7c\x34\xb6\xe6\xc2\x35\x7a\x2c\xd1\xd1\xff\x67\xd6\x85\xb9\x4c\x48\xa1\xf3\xb2\xe2\x4c\xd9\x61\x73\x32\xce\xe9\x11\x74\x84\xb6\x6a\x8b\x79\x92\x73\x58\x30\x6c\x68\xab\x4c\x85\x8a\xb9\x46\x10\xc3\x43\x2b\x1d\x48\x17\x9c\x6b\x07\xad\x79\xa6\x46\xc3\x8f\xa6\xda\x91\x0d\xaf\x6b\xac\x40\x6a\xe7\x51\xa9\xb0\x1d\x97\x1c\xe5\x30\xdf\x0d\x5c\x66\x69\x0a\xcc\x90\xb7\x6e\x86\x20\x32\x15\x00\xa4\xb1\x54\x54\xc3\x12\xbc\x1d\x48\x88\xcd\x20\x3f\xd0\xb1\x93\x25\x6a\xfc\x58\xc6\x88\x15\x63\xe4\xd7\x94\x70\x76\x96\x07\x05\xef\x28\x93\xde\x4b\x6b\x74\x47\xda\x33\x6e\x87\x60\xcd\x9a\xf6\xa4\x4c\xcf\xaf\xa3\xed\x8e\xef\xbd\x35\xf5\x50\xbd\xd8\xbd\x0e\xed\x39\xad\xc3\xaa\x95\x9a\x26\xa7\xd2\xa3\xd0\xb0\xee\x8d\xd4\xc1\x34\xbe\xea\x8b\xe9\xf4\x55\x58\x91\xe5\x8b\xf3\xd1\xfc\xba\x76\x6f\x69\xc5\xb4\x43\xf5\x88\x96\x0a\x6b\x18\x56\x52\xef\xdc\x7b\x63\x14\x27\x1e\xe0\xc0\xaa\x1f\x60\x09\xf3\xf4\xf8\x41\x0c\xf3\xf4\x1b\x30\x5b\xc0\x3d\x4a\x55\x2a\x82\xd5\xef\x7f\x30\x5b\xea\x8c\x3d\x70\x68\x76\x96\x5d\x5c\xbc\x84\xa6\xeb\x1f\x4e\x76\x3c\xcb\x52\x00\x21\x36\xca\x34\xcd\x28\x73\x2b\x15\x9d\x4a\x4c\x94\x69\xa2\x30\x80\x27\x27\x9f\x19\x98\xa5\xe3\x75\x5c\x75\x7e\xbc\x95\x58\xed\x86\x9e\x55\x2c\x58\x11\x8f\x20\xfc\x84\x2c\x61\x8b\xca\xf1\x22\x7a\x6b\x9e\x0e\x6f\x2b\x7a\x45\x00\x5a\xef\x7b\xee\x18\x1d\xff\x77\xe3\xe5\xbf\x00\x00\x00\xff\xff\x85\xfa\x2a\x90\xdf\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1503, mode: os.FileMode(420), modTime: time.Unix(1492319807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

