// Code generated by go-bindata.
// sources:
// plugins/plugins.toml
// DO NOT EDIT!

package plugins

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsPluginsToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x97\x4b\x73\xdb\x36\x10\xc7\xef\xfa\x14\x3b\xf4\xa5\xed\x44\x56\x93\x4e\x72\xc8\x4c\x0f\xaa\x2c\x27\x76\xfd\xd0\x88\x8a\x66\x32\x1e\x8f\xb3\x22\x41\x0a\x35\x09\x60\x00\x50\xb1\xbe\x7d\x01\x50\x12\xf5\x40\x1a\x82\xb5\x2e\x94\xb0\xd8\xff\xee\x6f\x17\x0f\xea\x0c\x46\x5c\xac\x25\xcd\x97\x1a\x7e\x49\x7e\x85\x77\xbf\xbf\xfd\x03\xfa\xf6\xf1\x01\x16\x05\x26\xcf\x9a\x0b\xb8\xe6\x6a\x59\x21\xdc\x22\x65\xe4\x0d\x0c\x8b\x02\xa6\xd6\x41\xc1\x94\x28\x22\x57\x24\x3d\xef\x9d\x41\x4c\x08\xdc\x5c\x8d\xc6\x77\xf1\x18\x32\x2e\xa1\xa0\x09\x61\x8a\x00\x65\xe6\x57\x89\x9a\x72\x76\xde\xeb\x9d\xbd\xce\xc7\xc4\x9b\xdc\x7c\xf9\x74\x75\x67\xd2\x67\x19\xcd\x2b\xe9\x02\x40\xb8\xce\x2b\xe5\xd3\xd3\x54\x17\x04\xfe\x84\xe8\x16\x2d\x39\x4c\x8a\x2a\xa7\xec\x30\x3d\x15\xf5\x7a\x0f\x0f\xc2\x59\x1e\x1f\x7b\x00\x84\xe1\xa2\x20\xa9\x71\xcb\xb0\x50\xc4\x8c\x30\x2c\x9d\x0a\x53\xb2\x88\xcc\xef\x94\xa8\x44\x52\xe1\xe0\xcc\xf0\x5d\x3c\xbd\x81\x0b\xd4\xb8\x40\x53\xda\xcf\xa8\x96\xa6\xee\x28\x93\xa5\x9d\x9b\xa0\x26\x39\x97\x6b\x3b\x91\x32\x4d\x9c\x00\x2d\x31\x77\x8a\xa5\xcb\x6b\xb0\x15\x96\x44\x70\x45\xf5\x66\xfa\x52\x6b\xa1\x3e\x0e\x06\x39\xd5\xcb\x6a\x71\x9e\xf0\x72\x50\xcf\xa7\x7c\xf3\xa5\x6f\x1d\xcf\x8d\x3d\x02\xf3\x31\x02\x25\xad\x33\x5d\x9a\x24\xac\xa0\x7d\xea\xb5\x20\xca\x0c\x3e\x98\x70\xe9\xfb\x08\x1e\x7f\xc8\xab\x65\xb5\x8f\xbb\xa2\xb2\x52\x9a\x6b\xf4\x41\xcf\xad\x71\x66\x8d\x66\x65\x66\xb4\x30\x21\x54\x82\x0c\x90\xa5\x2e\x2a\x14\x9c\x3f\x57\xa2\x75\x09\x0e\x83\x05\x17\xa2\x71\xdf\x2f\x47\x25\x0a\x8e\xbb\x4e\x82\xdd\x0f\x7a\x3b\xa8\x39\x7c\xb3\xc0\xdf\x80\x66\xb0\xe6\x15\x7c\x47\xa6\xed\xe8\xc6\xae\xb0\x14\x66\xf1\x98\x81\x3d\x6d\x13\xda\xc8\xa2\xa0\xcf\xc4\x65\xe6\xf0\x4a\x1b\x21\x6a\x78\x5b\x34\xe1\x0d\x44\x6a\x89\x6f\x37\xcf\x77\xef\x3f\xd8\xb6\xd8\x56\xac\xec\x9c\xe8\x76\x68\x37\xed\xd3\x7c\xf6\x34\x9c\x5c\x45\xad\x1b\x66\xa4\x52\xfe\xbd\xef\xb6\xbf\xf4\xf4\x2c\x76\xf6\xd8\x99\x4d\xd7\xba\xb4\xe9\x24\x44\x78\xab\x0e\x24\xb6\xdd\x0a\x2b\xdb\x7f\xac\xe1\xe3\x3d\xab\x09\x96\xfd\x64\x5d\xca\xca\x53\x90\x99\x31\x8e\xac\xad\x63\x35\x0e\xc5\x83\x2b\xd1\xb8\x07\xee\xe1\xbd\x3a\x9c\x2c\x9a\xd9\xe7\xa7\x2f\xf1\x78\x6a\xe7\x34\x23\x7f\x8f\xbf\xb6\x5f\x46\x76\x37\xdb\x0b\xc2\x53\x30\xa5\x52\x42\xc4\x60\x36\xa5\x17\x03\xf2\x42\x33\xcd\x79\x71\x5c\xad\x92\x68\x4c\xcd\x69\xe8\x2b\xd8\xbe\x74\x70\xb9\xb6\xce\xbe\x62\xfd\xf6\xe3\x53\xfc\x88\x6e\x8d\x12\x3d\x64\x5f\x87\xd3\x21\xc4\xe6\x04\x3b\xc6\xc1\x95\x0f\x64\xab\x12\x0c\x61\x1d\x71\xe5\x59\xf6\xed\x09\x70\x85\x4a\x7b\x10\x86\x76\x1c\x86\x4c\x53\x77\x38\xb7\x03\xd9\x89\x05\x93\xd4\x14\x67\x1f\x6b\x85\xce\x2c\xb9\x8f\x64\xfe\x29\x9c\x23\xff\x9f\x14\x79\x57\x86\x05\xd5\x29\xc9\x08\x4b\xbd\x87\xee\x5f\x8d\x35\x94\xe9\x48\xb8\x33\xdb\xbe\x4e\x47\xc6\xa4\xc0\xb2\x4e\xf2\x08\x6f\x64\x0c\xc3\x79\x3b\x9e\x46\xa4\x33\xca\x46\xa2\x2b\x05\x2f\x79\xea\x3b\xd7\x46\xce\x10\xda\x9f\x46\xae\x3b\x4f\x2d\xd1\x91\x27\x13\x92\xfb\x4e\x82\xcb\xfe\x64\x7a\x3f\x0b\xc5\xd9\xa9\x75\xa6\x71\x0a\x21\x3b\xe9\xf8\xb6\x16\xc4\x43\x33\x19\x9b\xeb\xd9\xde\x34\xf6\x65\x4c\x4b\x6a\xb3\x16\x5c\x6a\x2b\x02\xe4\x85\x24\x95\xfb\x7a\x42\x69\x4c\x3e\xcc\x3a\x46\x30\xa3\x20\xbe\x7b\x07\x85\x30\x56\xf7\x47\x62\xf0\xd2\x4f\xb9\xb2\xf9\xb4\xef\x5f\xc1\x95\xf2\xf5\x8f\x4a\x32\x5e\x9b\xbf\x6e\xb8\x50\x70\xbf\xc8\x2a\x65\xb9\x52\x88\x0d\x3d\xcb\x21\xe6\xc5\xe6\xed\xab\x05\xee\x2e\x46\xf8\x7d\x6b\x3d\x5f\x01\xfa\xb8\xc9\x3c\xcb\x8c\xbc\x07\xfb\xde\x19\x4e\x9b\x7d\x7f\x33\x1e\x4c\x67\x97\x90\xf2\xa4\x2a\x09\xd3\x27\x9d\xde\x1a\x7c\xfc\x4d\xb4\xe0\x02\xd4\xae\x81\xaf\x1b\x27\x4b\x3a\xcd\x7c\x6b\xfa\xe2\xf2\x94\xd3\x0e\x76\x62\xdc\xc4\x08\x5f\xd3\x69\xf6\xb3\xfe\x3a\xe9\xb6\xac\xff\xd8\x77\x01\x87\xe9\x41\xbe\xde\x19\x4f\xc9\xaf\x63\xa8\x4d\x41\xd8\x87\xe1\x82\xe9\x1b\xf7\x9f\x15\x61\x3f\xd0\xbf\x01\x00\x00\xff\xff\x36\x01\xbc\xf8\x9d\x11\x00\x00")

func pluginsPluginsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsPluginsToml,
		"plugins/plugins.toml",
	)
}

func pluginsPluginsToml() (*asset, error) {
	bytes, err := pluginsPluginsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/plugins.toml", size: 4509, mode: os.FileMode(420), modTime: time.Unix(1470530273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/plugins.toml": pluginsPluginsToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"plugins.toml": &bintree{pluginsPluginsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

