// Code generated by go-bindata.
// sources:
// plugins/plugins.toml
// DO NOT EDIT!

package plugins

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsPluginsToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x98\xdf\x6e\xe2\x38\x14\xc6\xef\x79\x8a\x23\x7a\xb3\xbb\x1a\xca\xce\xac\x66\x56\x1a\x69\x2f\x58\x4a\x67\xda\xa5\x2d\x22\x4c\xa5\xd9\xaa\xea\x98\xc4\x09\xde\x26\xb1\x65\x3b\xb4\xf4\xe9\xd7\xc7\xfc\x09\x04\x77\x1a\x07\x7a\xd1\x80\x8f\xfd\x1d\xff\xbe\xe3\x38\x0e\x27\xd0\xe7\x62\x21\x59\x32\xd3\xf0\x4b\xf8\x2b\x7c\xf8\xfd\xfd\x1f\xd0\xc1\xcb\x27\x98\xa6\x24\x7c\xd4\x5c\xc0\x25\x57\xb3\x82\xc0\x15\x61\x39\x7d\x07\xbd\x34\x85\x31\x0e\x50\x30\xa6\x8a\xca\x39\x8d\x4e\x5b\x27\x10\x50\x0a\xc3\x8b\xfe\xe0\x3a\x18\x40\xcc\x25\xa4\x2c\xa4\xb9\xa2\xc0\x72\xf3\x2d\x23\x9a\xf1\xfc\xb4\xd5\x3a\x39\xce\x9f\xc9\x37\x1a\x7e\xfb\x72\x71\x6d\xa6\x9f\xc7\x2c\x29\xa4\x4d\x00\xfe\x3a\x47\x9a\x4f\x4b\x33\x9d\x52\xf8\x0b\xda\x57\x04\xc9\x61\x94\x16\x09\xcb\x77\xa7\xa7\xda\xad\xd6\xdd\x9d\xb0\x91\xfb\xfb\x16\x00\xcd\xc9\x34\xa5\x91\x19\x16\x93\x54\x51\xd3\x92\x93\xcc\xaa\xe4\x4a\xa6\x6d\xf3\x3d\xa2\x2a\x94\x4c\x58\x38\xd3\x7c\x1d\x8c\x87\x70\x46\x34\x99\x12\x63\xed\x57\xa2\x66\xc6\x77\x22\xc3\x19\xf6\x0d\x89\xa6\x09\x97\x0b\xec\xc8\x72\x4d\xad\x00\xcb\x48\x62\x15\x33\x3b\xaf\xee\x5a\x58\x52\xc1\x15\xd3\xab\xee\x33\xad\x85\xfa\xdc\xed\x26\x4c\xcf\x8a\xe9\x69\xc8\xb3\xee\xb2\x3f\xe3\xab\x0f\x1d\x1c\x78\x6a\xe2\x38\x78\x5a\xb0\x74\x7b\xd6\x19\x5b\xce\x7a\x66\x26\x84\x71\xbc\xea\x85\xa0\xca\x34\xde\x99\xd4\xd1\xc7\x36\xdc\xbf\xca\xae\x65\xb1\x8d\x3e\x67\xb2\x50\x9a\x6b\xe2\x32\xe0\x16\x83\x13\x0c\x9a\x55\x1a\xb3\xd4\xa4\x50\x21\xc9\x81\xe4\x91\xcd\x0a\x29\xe7\x8f\x85\xa8\x6d\xc7\x6e\x32\x6f\x53\xca\xe1\xaf\x59\x53\x88\x94\x93\x4d\x03\xe0\x7d\xa2\xd7\x8d\x9a\xc3\x0f\x84\xff\x01\x2c\x86\x05\x2f\xe0\x89\xe4\x1a\x5b\x57\x71\x45\x32\x61\x16\x95\x69\xd8\xca\x63\xa6\x61\x64\x89\x60\x8f\xd4\xce\xd2\xa2\x66\x98\xa1\x5d\xb2\xd7\x28\xc8\x3b\x68\xab\x19\x79\xbf\xba\x7e\xf8\xf8\x09\x4b\x84\x65\x99\x63\x9f\xf6\x55\x0f\x6f\xe6\x87\xdb\xc9\x43\x6f\x74\xd1\xae\x5d\x3c\x23\x15\xf1\xa7\x8e\xdd\x16\xa4\xa3\x7e\x81\x8d\x07\x36\x6c\x2a\xd8\xa4\x64\x7b\x29\xbc\xab\xb6\xa3\x70\xc0\x9a\x5e\x5b\xf8\x93\xb5\x5d\xbd\xaf\x35\x25\x59\x27\x5c\x64\xb2\x70\x98\x33\x31\xc1\x3e\xc6\x1a\x3a\xb3\x2b\xee\x6d\x4b\x39\xfc\x38\x9e\xec\x2d\xa6\xc9\xd7\x87\x6f\xc1\x60\x8c\x7d\xca\x96\x7f\x06\xdf\xeb\x2f\x2f\xbc\xe3\xf1\x81\xe2\x30\x4f\xa9\x88\x52\xd1\x9d\x8c\xd9\x59\x97\x3e\xb3\x58\x73\x9e\x56\x9d\xcb\xa8\x26\x91\xd9\x3d\x5d\xe6\x6d\x4b\x7b\x5b\xb7\x1e\xfc\x96\x71\xbf\xbd\xfe\x04\xa8\x90\x2e\x88\x24\x0e\xca\xef\xbd\x71\x0f\x02\xb3\xe3\x55\xd1\xc8\xdc\x05\xb5\x56\xf1\x06\xc2\x81\x07\xc0\x54\x97\x3d\x99\x13\xa5\x1d\x38\x3d\x6c\x87\x5e\xae\x99\xdd\xd8\xeb\x41\x6d\xc4\xbc\xa9\xc8\x1c\x99\x4e\x3e\x6f\x14\x0e\xaf\x13\x99\x27\x2e\xae\xdb\x2f\xfe\x54\xc9\x81\x4c\xc9\x71\x88\xa6\x4c\x47\x34\xa6\x79\xe4\xdc\xc0\xff\x2e\xa3\xbe\x84\x15\xe1\xc6\xa4\x15\x9d\xc3\x89\xc3\x94\x64\xcb\x29\x57\x60\xfb\x26\xd0\xbb\xad\x47\x57\x8a\x34\x06\x2b\x25\x8e\xc0\xc4\x33\x1e\xb9\xf6\xc9\xbe\x0d\xf8\xd6\xae\x94\x6b\x4e\xb7\x91\x38\x9c\x2e\x16\x92\xbb\xf6\x93\xf3\xce\x68\x7c\x33\xf1\x85\xdb\xa8\x35\x66\xdb\x28\xac\xd1\x56\xf3\x6d\x40\x66\x8e\x25\x61\x21\xa9\x13\x2e\xb0\x21\x6f\xbc\x2d\xc9\xe6\x84\x5b\x22\x87\xd7\x4f\x71\x31\xe3\xca\x75\x3e\xb4\x01\x5f\xc2\x52\xae\x31\x5f\x29\x71\x84\xc7\x9d\x70\x95\x6f\x34\x30\xc7\x3a\x3c\x95\xe0\x81\x5e\x4b\x86\x08\x82\x4b\x8d\x22\x40\x9f\x8d\xbb\xf6\xe3\x1e\xb2\x09\xb9\x98\x45\xb3\x7a\x0a\xfa\xd6\x63\x9d\x08\x61\x7a\xda\x17\xd6\xee\x73\x27\xe2\x0a\xe7\x56\x7f\xfd\xa6\x5c\xb9\x0a\x7b\xce\x24\x1d\x2c\x28\x0c\xc9\x54\xc1\xcd\x34\x2e\x14\x32\x46\x10\x18\x27\xf2\x04\x02\x9e\xae\x4e\xf3\x35\xd0\x37\x39\xfc\xcf\x69\x38\xf2\xc8\x06\x54\x8b\xcf\xe3\xd8\xa4\x72\x58\x70\x63\x03\xfb\x8b\xe0\x66\x38\xe8\x8e\x27\xe7\x10\xf1\xb0\xc8\x68\xae\xf7\x56\xc0\x3a\xe0\xf2\xa2\xcc\xe6\x6d\xc6\x72\xe8\x11\x4f\x79\x22\x8a\x5d\xeb\xfe\xec\x7c\x9f\x19\x1b\x1b\xf1\xae\x72\xf8\xaf\xfb\x28\xf6\xa9\xbb\x4d\x53\x97\xfb\x3f\x3c\x4f\x5a\x64\x07\xfe\xe5\x26\xb8\xef\xc2\x65\x00\xcb\x90\x97\x05\xbb\xe9\xbc\x9d\x28\x87\xfb\x18\xb2\x9d\xb4\xae\x2f\x2f\x4c\x38\x0c\xf9\x97\x89\x2d\x27\x8a\x1c\x7f\xbe\x62\x73\x0a\xab\xeb\xfe\x96\xbf\x6c\x77\x39\xb1\x4a\xe0\x6d\x81\x19\xf7\x26\x7b\x99\xd5\xf4\xde\x7a\xc9\xd5\x44\xe2\x0b\x6c\xf2\x82\xff\xc5\x9f\x2f\xf8\xa6\xfb\x7f\x00\x00\x00\xff\xff\x48\x6f\x8c\x9f\x46\x15\x00\x00")

func pluginsPluginsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsPluginsToml,
		"plugins/plugins.toml",
	)
}

func pluginsPluginsToml() (*asset, error) {
	bytes, err := pluginsPluginsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/plugins.toml", size: 5446, mode: os.FileMode(420), modTime: time.Unix(1474754038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/plugins.toml": pluginsPluginsToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"plugins.toml": &bintree{pluginsPluginsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

