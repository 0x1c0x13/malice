// Code generated by go-bindata.
// sources:
// plugins/plugins.toml
// DO NOT EDIT!

package plugins

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsPluginsToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x98\x5d\x6f\xdb\x36\x14\x86\xef\xfd\x2b\x0e\x9c\x9b\x6d\xa8\xe3\xb5\x43\x3b\xa0\xc0\x2e\x3c\xc7\x69\x93\x39\x89\x61\xb9\x01\xba\x20\x48\x69\x89\x92\xb9\x48\x22\x41\x52\x4e\x9c\x5f\x3f\x1e\xfa\x43\xfe\x60\x1a\x51\x56\x2e\x22\x9b\x87\x7c\x0f\x9f\xf7\x50\x14\xe5\x13\xe8\x73\xb1\x90\x2c\x99\x69\xf8\x25\xfc\x15\x3e\xfc\xfe\xfe\x0f\xe8\xe0\xe5\x13\x4c\x53\x12\x3e\x6a\x2e\xe0\x92\xab\x59\x41\xe0\x8a\xb0\x9c\xbe\x83\x5e\x9a\xc2\x18\x07\x28\x18\x53\x45\xe5\x9c\x46\xa7\xad\x13\x08\x28\x85\xe1\x45\x7f\x70\x1d\x0c\x20\xe6\x12\x52\x16\xd2\x5c\x51\x60\xb9\xf9\x96\x11\xcd\x78\x7e\xda\x6a\x9d\x34\xf3\x67\xf2\x8d\x86\xdf\xbe\x5c\x5c\x9b\xe9\xe7\x31\x4b\x0a\x69\x13\x80\xbf\x4e\x43\xf3\x69\x69\xa6\x53\x0a\x7f\x41\xfb\x8a\x20\x39\x8c\xd2\x22\x61\xf9\xee\xf4\x54\xbb\xd5\xba\xbb\x13\x36\x72\x7f\xdf\x02\xa0\x39\x99\xa6\x34\x32\xc3\x62\x92\x2a\x6a\x5a\x72\x92\x59\x95\x5c\xc9\xb4\x6d\xbe\x47\x54\x85\x92\x09\x0b\x67\x9a\xaf\x83\xf1\x10\xce\x88\x26\x53\x62\xac\xfd\x4a\xd4\xcc\xf8\x4e\x64\x38\xc3\xbe\x21\xd1\x34\xe1\x72\x81\x1d\x59\xae\xa9\x15\x60\x19\x49\xac\x62\x66\xe7\xd5\x5d\x0b\x4b\x2a\xb8\x62\x7a\xd5\x7d\xa6\xb5\x50\x9f\xbb\xdd\x84\xe9\x59\x31\x3d\x0d\x79\xd6\x5d\xf6\x67\x7c\xf5\xa1\x83\x03\x4f\x4d\x1c\x07\x4f\x0b\x96\x6e\xcf\x3a\x63\xcb\x59\xcf\xcc\x84\x30\x8e\x57\xbd\x10\x54\x99\xc6\x3b\x93\x3a\xfa\xd8\x86\xfb\x57\xd9\xb5\x2c\xb6\xd1\xe7\x4c\x16\x4a\x73\x4d\x5c\x06\xdc\x62\x70\x82\x41\xb3\x4a\x63\x96\x9a\x14\x2a\x24\x39\x90\x3c\xb2\x59\x21\xe5\xfc\xb1\x10\x95\xed\xd8\x4d\xe6\x6d\x4a\x39\xfc\x35\x6b\x0a\x91\x72\xb2\x69\x00\xbc\x4f\xf4\xba\x51\x73\xf8\x81\xf0\x3f\x80\xc5\xb0\xe0\x05\x3c\x91\x5c\x63\xeb\x2a\xae\x48\x26\xcc\xa2\x32\x0d\x5b\x79\xcc\x34\x8c\x2c\x11\xec\x91\xda\x59\x5a\xd4\x0c\x33\xb4\x4b\xf6\x0a\x05\x79\x07\x6d\x35\x23\xef\x57\xd7\x0f\x1f\x3f\x61\x89\xb0\x2c\x73\xec\xd3\xbe\xea\xe1\xcd\xfc\x70\x3b\x79\xe8\x8d\x2e\xda\x95\x8b\x67\xa4\x22\xfe\xd4\xb1\xdb\x82\x74\xd4\x2f\xb0\xf1\xc0\x86\x4d\x05\xeb\x94\xec\x20\x85\x77\xd5\x76\x14\x8e\x58\xd3\x6b\x0b\x7f\xb2\xb6\xf7\xef\x6b\x4d\x49\xd6\x09\x17\x99\x2c\x1c\xe6\x4c\x4c\xb0\x8f\xb1\x9a\xce\xec\x8a\x7b\xdb\x52\x0e\x6f\xc6\x93\x83\xc5\x34\xf9\xfa\xf0\x2d\x18\x8c\xb1\x4f\xd9\xf2\xcf\xe0\x7b\xf5\xe5\x85\x77\x3c\x3e\x50\x1c\xe6\x29\x15\x51\x2a\xba\x93\x31\x3b\xeb\xd2\x67\x16\x6b\xce\xd3\x7d\xe7\x32\xaa\x49\x64\x76\x4f\x97\x79\xdb\xd2\xde\xd6\xad\x07\xbf\x65\xdc\x6f\xaf\x3f\x01\xf6\x48\x17\x44\x12\x07\xe5\xf7\xde\xb8\x07\x81\xd9\xf1\xf6\xd1\xc8\xdc\x05\xb5\x56\xf1\x06\xc2\x81\x47\xc0\xec\x2f\x7b\x32\x27\x4a\x3b\x70\x7a\xd8\x0e\xbd\x5c\x33\xbb\xb1\x57\x83\xda\x88\x79\x53\x91\x39\x32\x9d\x7c\xde\x28\x1c\x5f\x27\x32\x4f\x5c\x5c\xb7\x5f\xfc\xa9\x92\x23\x99\x92\x66\x88\xa6\x4c\x47\x34\xa6\x79\xe4\xdc\xc0\xff\x2e\xa3\xbe\x84\x7b\xc2\xb5\x49\xf7\x74\x8e\x27\x0e\x53\x92\x2d\xa7\xbc\x07\xdb\x37\x81\xde\x6d\x35\xba\x52\xa4\x36\x58\x29\xd1\x00\x13\xcf\x78\xe4\xda\x27\xfb\x36\xe0\x5b\xbb\x52\xae\x3e\xdd\x46\xe2\x78\xba\x58\x48\xee\xda\x4f\xce\x3b\xa3\xf1\xcd\xc4\x17\x6e\xa3\x56\x9b\x6d\xa3\xd0\x00\x9a\x39\x97\x84\x85\xa4\x4e\xba\xc0\x86\xbc\xf9\xb6\x24\xeb\x23\x6e\x89\x1c\x4f\xa9\xb8\x98\x71\xe5\x3a\x20\xda\x80\x2f\x61\x29\x57\x9b\xaf\x94\x68\xe0\x79\x27\x5c\xe5\x1b\x0d\xcc\xb9\x0e\x8f\x25\x78\xa2\xd7\x92\x21\x82\xe0\x52\xa3\x08\xd0\x67\xe3\xae\xfd\x78\x80\x6c\x42\x2e\x66\x51\xaf\x9e\x82\xbe\xf5\x5c\x27\x42\x98\x9e\xf6\x8d\xb5\xfb\xdc\x89\xb8\xc2\xb9\x55\x5f\xbf\x29\x57\xae\xc2\x9e\x33\x49\x07\x0b\x0a\x43\x32\x55\x70\x33\x8d\x0b\x85\x8c\x11\x04\xc6\x89\x3c\x81\x80\xa7\xab\xe3\x7c\x05\xf4\x4d\x0e\xff\x83\x1a\x8e\x6c\xd8\x80\xfd\xe2\xf3\x38\x36\xa9\x1c\x16\xdc\xd8\xc0\xe1\x22\xb8\x19\x0e\xba\xe3\xc9\x39\x44\x3c\x2c\x32\x9a\xeb\x83\x15\xb0\x0e\xb8\xbc\x28\xb3\x79\x9b\xb1\x1c\xda\xe0\x31\x4f\x44\xb1\x6b\xdd\x9f\x9d\x1f\x32\x63\x63\x2d\xde\x55\x0e\xff\x75\x1f\xc5\x3e\x75\xb7\x69\xaa\x72\xff\x87\x07\x4a\x8b\xec\xc0\xbf\xdc\x04\x0f\x5d\xb8\x0c\x60\x19\xf2\xb2\x60\x37\x9d\xb7\x13\xe5\x70\x1f\x43\xb6\x93\x56\xf5\xe5\x85\x09\x87\x21\xff\x32\xb1\xe5\x44\x91\xe3\xef\x57\x6c\x4e\x61\x75\x3d\xdc\xf2\x97\xed\x2e\x27\x56\x09\xbc\x2d\x30\xe3\xde\x64\x2f\xb3\x9a\xde\x5b\x6f\xb9\x9a\x48\x7c\x83\x4d\x5e\xf0\xbf\xf8\xf3\x05\x5f\x75\xff\x0f\x00\x00\xff\xff\x0b\x2a\xaf\x31\x47\x15\x00\x00")

func pluginsPluginsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsPluginsToml,
		"plugins/plugins.toml",
	)
}

func pluginsPluginsToml() (*asset, error) {
	bytes, err := pluginsPluginsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/plugins.toml", size: 5447, mode: os.FileMode(420), modTime: time.Unix(1475679267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/plugins.toml": pluginsPluginsToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"plugins.toml": &bintree{pluginsPluginsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

