// Code generated by go-bindata.
// sources:
// plugins/plugins.toml
// DO NOT EDIT!

package plugins

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsPluginsToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x97\xdf\x73\xda\x38\x10\xc7\xdf\xf9\x2b\x76\xc8\xcb\xdd\x4d\x09\xd7\xde\xb4\x0f\x9d\xb9\x07\x8e\x90\x36\x39\x92\x30\x98\x66\xa6\x93\xc9\xa4\xc2\x96\x6d\x5d\x6c\x4b\x23\xc9\x34\xfc\xf7\xa7\x15\x3f\x0c\x46\x69\x2c\x43\x5e\x00\xad\xf4\x5d\x7d\xbe\xbb\x96\x95\x33\x18\x72\xb1\x94\x2c\x49\x35\xfc\x16\xfe\x0e\x1f\xfe\x7c\xff\x17\xf4\xf0\xe3\x13\xcc\x33\x12\x3e\x6b\x2e\xe0\x9a\xab\xb4\x24\x70\x43\x58\x41\xdf\xc1\x20\xcb\x60\x8a\x0b\x14\x4c\xa9\xa2\x72\x41\xa3\xf3\xce\x19\x04\x94\xc2\xf8\x6a\x38\xba\x0d\x46\x10\x73\x09\x19\x0b\x69\xa1\x28\xb0\xc2\xfc\xca\x89\x66\xbc\x38\xef\x74\xce\x4e\xf3\x67\xf2\x4d\xc6\xdf\xbe\x5c\xdd\x9a\xed\x17\x31\x4b\x4a\x69\x13\x80\xbf\xce\x89\xf6\xd3\xd1\x4c\x67\x14\xfe\x86\xee\x0d\x41\x72\x98\x64\x65\xc2\x8a\xfd\xed\xa9\x6e\xa7\xf3\xf0\x20\x6c\xe4\xf1\xb1\x03\x40\x0b\x32\xcf\x68\x64\x96\xc5\x24\x53\xd4\x8c\x14\x24\xb7\x2a\x85\x92\x59\xd7\xfc\x8e\xa8\x0a\x25\x13\x16\xce\x0c\xdf\x06\xd3\x31\x5c\x10\x4d\xe6\xc4\x58\xfb\x95\xa8\xd4\xf8\x4e\x64\x98\xe2\xdc\x90\x68\x9a\x70\xb9\xc4\x89\xac\xd0\xd4\x0a\xb0\x9c\x24\x56\x31\xb7\xfb\xea\x6f\x84\x25\x15\x5c\x31\xbd\x9e\x9e\x6a\x2d\xd4\xe7\x7e\x3f\x61\x3a\x2d\xe7\xe7\x21\xcf\xfb\xab\xf9\x8c\xaf\xbf\xf4\x70\xe1\xb9\x89\xe3\xe2\x79\xc9\xb2\xdd\x5d\xe7\x6c\xb5\xeb\xd4\x6c\x08\xe3\xf8\xa9\x97\x82\x2a\x33\xf8\x60\x52\x47\x1f\xbb\xf0\xf8\x2a\xbb\x96\xe5\x2e\xfa\x82\xc9\x52\x69\xae\x89\xcb\x80\x7b\x0c\xce\x30\x68\xba\x34\x66\x99\x49\xa1\x42\x52\x00\x29\x22\x9b\x15\x32\xce\x9f\x4b\xd1\xd8\x8e\xfd\x64\xde\xa6\x54\xcb\x5f\xb3\xa6\x14\x19\x27\xdb\x01\xc0\xe7\x44\x6f\x06\x35\x87\x1f\x08\xff\x03\x58\x0c\x4b\x5e\xc2\x4f\x52\x68\x1c\x5d\xc7\x15\xc9\x85\x69\x2a\x33\xb0\x93\xc7\x6c\xc3\xc8\x12\xc1\x9e\xa9\xdd\xa5\x45\xcd\x31\x43\xb7\x62\x6f\x50\x90\x77\xd0\x55\x29\x79\xbf\xfe\xfc\xf0\xf1\x13\x96\x08\xcb\xb2\xc0\x39\xdd\x9b\x01\x3e\xcc\x4f\xf7\xb3\xa7\xc1\xe4\xaa\xdb\xb8\x78\x46\x2a\xe2\x3f\x7b\xf6\x58\x90\x8e\xfa\x05\x36\x1e\xd8\xb0\xa9\x60\x9b\x92\x1d\xa4\xf0\xae\xda\x9e\xc2\x11\x3d\xbd\xb1\xf0\x17\xbd\x5d\x7f\xae\x35\x25\x79\x2f\x5c\xe6\xb2\x74\x98\x33\x33\xc1\x21\xc6\x5a\x3a\xb3\x2f\xee\x6d\x4b\xb5\xfc\x34\x9e\x1c\x34\xd3\xec\xeb\xd3\xb7\x60\x34\xc5\x39\xd5\xc8\xbf\xa3\xef\xcd\xdb\x0b\x9f\x78\x7c\xa1\x38\xcc\x53\x2a\xa2\x54\xf4\x67\x53\x76\xd1\xa7\x2f\x2c\xd6\x9c\x67\x75\xe7\x72\xaa\x49\x64\x4e\x4f\x97\x79\xbb\xd2\xde\xd6\x6d\x16\xbf\x65\xdc\x1f\xaf\xbf\x01\x6a\xa4\x4b\x22\x89\x83\xf2\xfb\x60\x3a\x80\xc0\x9c\x78\x75\x34\xb2\x70\x41\x6d\x54\xbc\x81\x70\xe1\x11\x30\xf5\xb6\x27\x0b\xa2\xb4\x03\x67\x80\xe3\x30\x28\x34\xb3\x07\x7b\x33\xa8\xad\x98\x37\x15\x59\x20\xd3\xd9\xe7\xad\xc2\xf1\x75\x22\x8b\xc4\xc5\x75\xff\xc5\x9f\x2a\x39\x92\x29\x39\x0d\xd1\x9c\xe9\x88\xc6\xb4\x88\x9c\x07\xf8\x3f\x55\xd4\x97\xb0\x26\xdc\x9a\xb4\xa6\x73\x3c\x71\x98\x91\x7c\xb5\xe5\x1a\xec\xd0\x04\x06\xf7\xcd\xe8\x2a\x91\xd6\x60\x95\xc4\x09\x98\x78\xce\x23\xd7\x39\x39\xb4\x01\xdf\xda\x55\x72\xed\xe9\xb6\x12\xc7\xd3\xc5\x42\x72\xd7\x79\x72\xd9\x9b\x4c\xef\x66\xbe\x70\x5b\xb5\xd6\x6c\x5b\x85\x0d\xda\x7a\xbf\x2d\xc8\xcc\xb5\x24\x2c\x25\x75\xc2\x05\x36\xe4\x8d\xb7\x23\xd9\x9e\x70\x47\xe4\xf8\xfa\x29\x2e\x52\xae\x5c\xf7\x43\x1b\xf0\x25\xac\xe4\x5a\xf3\x55\x12\x27\x78\xdd\x09\x57\xf9\x26\x23\x73\xad\xc3\x5b\x09\x5e\xe8\xb5\x64\x88\x20\xb8\xd4\x28\x02\xf4\xc5\xb8\x6b\xbf\x1e\x20\x9b\x90\x8b\x59\xb4\xab\xa7\xa0\x6f\xbd\xd6\x89\x10\x66\xa6\xfd\x87\xb5\xff\xd2\x8b\xb8\xc2\xbd\x35\xef\xdf\x8c\x2b\x57\x61\x2f\x99\xa4\xa3\x25\x85\x31\x99\x2b\xb8\x9b\xc7\xa5\x42\xc6\x08\x02\xe3\x44\x91\x40\xc0\xb3\xf5\x6d\xbe\x01\xfa\x36\x87\xff\x3d\x0d\x57\x9e\xd8\x80\x7a\xf1\x79\x1c\x9b\x54\x0e\x0b\xee\x6c\xe0\xb0\x09\xee\xc6\xa3\xfe\x74\x76\x09\x11\x0f\xcb\x9c\x16\xfa\xa0\x03\x36\x01\x97\x17\x55\x36\x6f\x33\x56\x4b\x4f\x78\xcb\x13\x51\xec\xea\xfb\x8b\xcb\x43\x66\x1c\x6c\xc5\xbb\xce\xe1\xdf\xf7\x51\xec\x53\x77\x9b\xa6\x29\xf7\x7f\x78\x9f\xb4\xc8\x0e\xfc\xeb\x6d\xf0\xd0\x85\xeb\x00\x56\x21\x2f\x0b\xf6\xd3\x79\x3b\x51\x2d\xf7\x31\x64\x37\xe9\xff\x01\x00\x00\xff\xff\x42\x78\x0e\x2c\x35\x14\x00\x00")

func pluginsPluginsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsPluginsToml,
		"plugins/plugins.toml",
	)
}

func pluginsPluginsToml() (*asset, error) {
	bytes, err := pluginsPluginsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/plugins.toml", size: 5173, mode: os.FileMode(420), modTime: time.Unix(1474337420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/plugins.toml": pluginsPluginsToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"plugins.toml": &bintree{pluginsPluginsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

