#compdef malice

typeset -A opt_args

# ----- Helper functions
__get_plugins() {
    declare -a plug_cmd
    plug_cmd=($(malice plugin list --all))
    if [[  'X$cont_cmd' != 'X' ]]
        _describe 'plugins' plug_cmd
}
__search_plugins() {
    declare -a plug_search_cmd
    plug_search_cmd=($(malice plugin search --all))
    if [[  'X$plug_search_cmd' != 'X' ]]
        _describe 'plugins' plug_search_cmd
}

# ----- Commands
# Seperate function for each command, makes extension easier later
# ---------------------------
__scan() {
  _files
}

__elk() {
  _arguments \
    '--logs[Display the Logs from the ELK Container]'
    ret=0
}

__web() {
  local -a web_commands
  web_commands=(
      'start:start web application'
      'stop:stop web application'
  )
  _describe 'web actions' web_commands -- && return 0
}

__plugin() {
   local plugin_commands; plugin_commands=(
     'list:list enabled installed plugins'
     'install:install plugin'
     'update:update plugin'
     'remove:remove plugin'
    )
    _describe -t plugin_commands 'plugin commands' plugin_commands
    case $line[2] in
      (list)
        local list_options; list_options=(
          '--detail:display plugin details'
          '--all:display all installed plugins'
        )
        _describe -t list_options 'list options' list_options && ret=0
        __get_plugins
        ;;
          # _arguments \
          #     '(-d --detail)'{-d,--detail}'[display plugin details]' \
          #     '--all[display all installed plugins]' \
          #     '(-):plugin: __get_plugins' && ret=0
      (install)
        __search_plugins && ret=0
      ;;
      (update)
        __get_plugins && ret=0
      ;;
      (remove)
        __get_plugins && ret=0
      ;;
    esac

    return ret
}
# end commands ---------
# ----------------------
local -a _1st_arguments
_1st_arguments=(
   'scan:Scan a file:scan:file:_files' \
   'elk:Start an ELK docker container' \
   'web:Start, Stop Web services' \
   'plugin:List, Install or Remove Plugins' \
   'help:Shows a list of commands or help for one command'
)

_arguments \
  '(- :)'{-D,--debug}'[Enable debug mode \[$MALICE_DEBUG\]]' \
  '(- :)'{-h,--help}'[show help]' \
  '(- :)'{-v,--version}'[print the version]' \
  '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "malice subcommand" _1st_arguments
  return
fi

local opts_help='(: -)--help[Print usage]'

integer ret=1
local -a _command_args
case "$words[1]" in
  scan)
    _arguments \
        $opts_help
    __scan && ret=0
    ;;
  elk)
    _arguments \
        $opts_help
    __elk && ret=0
    ;;
  web)
    _arguments \
        $opts_help
    __web && ret=0
    ;;
  plugin)
    _arguments \
        $opts_help
    __plugin && ret=0
    ;;
esac
